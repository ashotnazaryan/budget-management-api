{"version":3,"file":"static/js/305.d2ca79d1.chunk.js","mappings":"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","sources":["modules/Transactions/components/Transaction.tsx","modules/Transactions/pages/TransactionList.tsx","modules/Transactions/pages/CreateEditTransaction.tsx","modules/Transactions/Transactions.tsx","shared/components/FormDatePicker.tsx","shared/components/FormSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport date from 'core/date';\nimport { CategoryType, Transaction as TransactionModel } from 'shared/models';\nimport Icon from 'shared/components/Icon';\nimport { DATE_FORMAT } from 'shared/constants';\n\ninterface TransactionProps {\n  data: TransactionModel;\n  onClick?: (data: TransactionModel) => void;\n}\n\nconst Transaction: React.FC<TransactionProps> = ({ data, onClick }) => {\n  const { palette: { primary: { main, contrastText }, error } } = useTheme();\n  const { name, icon, accountName, accountIcon, createdAt, amount, type } = data;\n  const formattedCreatedAt = date(createdAt).format(DATE_FORMAT);\n\n  const onTransactionClick = (): void => {\n    if (onClick) {\n      onClick(data);\n    }\n  };\n\n  return (\n    <Paper elevation={1} sx={{ paddingX: 2, backgroundColor: main }} onClick={onTransactionClick}>\n      <Grid container columnSpacing={2} alignItems='center' sx={{ minHeight: 40, cursor: 'pointer' }}>\n        <Grid item xs={1} display='flex'>\n          {icon && <Icon name={icon} sx={{ color: contrastText, fontSize: { sm: 22, xs: 18 } }}></Icon>}\n        </Grid>\n        <Grid item xs={3}>\n          <Typography noWrap color={contrastText}>{name}</Typography>\n        </Grid>\n        <Grid item xs={2} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={type === CategoryType.expense ? error.main : contrastText}>{amount}</Typography>\n        </Grid>\n        <Grid item xs={2} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText}>{accountName}</Typography>\n        </Grid>\n        <Grid item xs={1} display='flex'>\n          {accountIcon && <Icon name={accountIcon} color='primary' sx={{ fontSize: { sm: 22, xs: 18 }, color: contrastText }}></Icon>}\n        </Grid>\n        <Grid item xs={3} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText}>{formattedCreatedAt}</Typography>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Transaction;\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/system/Box';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getTransactions, selectTransaction } from 'store/reducers';\nimport { Transaction as TransactionModel } from 'shared/models';\nimport { ROUTES } from 'shared/constants';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport EmptyState from 'shared/components/EmptyState';\nimport Transaction from '../components/Transaction';\n\nconst TransactionList: React.FC<{}> = () => {\n  const dispatch = useAppDispatch();\n  const { transactions, status } = useAppSelector(selectTransaction);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getTransactions());\n    }\n  }, [dispatch, status]);\n\n  const handleTransactionClick = ({ id, name }: TransactionModel): void => {\n    navigate(`${ROUTES.transactions.path}/view/${name}`, { state: { id } });\n  };\n\n  const getTransactionData = (data: TransactionModel): TransactionModel => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name,\n      accountName: data.accountNameKey ? t(data.accountNameKey) : data.accountName\n    };\n  };\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='list' />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !transactions?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('TRANSACTIONS.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {\n          transactions.map((transaction) => (\n            <Grid item key={transaction.id} xs={12}>\n              <Transaction data={getTransactionData(transaction)} onClick={handleTransactionClick} />\n            </Grid>\n          ))\n        }\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle text={t('TRANSACTIONS.PAGE_TITLE')} />\n      <Grid container rowGap={2}>\n        {renderContent()}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TransactionList;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport date, { LocalizedDate } from 'core/date';\nimport { useTranslation } from 'core/i18n';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useTheme } from '@mui/material/styles';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  getCategories,\n  selectCategory,\n  addTransaction,\n  selectTransaction,\n  selectAccount,\n  getAccounts,\n  selectSettings,\n  selectCurrentTransaction,\n  getTransaction,\n  editTransaction,\n  selectCategoryStatus,\n  selectAccountStatus,\n  deleteTransaction,\n  selectTransactionError,\n  resetGetTransactionStatus,\n  setGetTransactionErrorStatus\n} from 'store/reducers';\nimport { CategoryType, Category as CategoryModel, TransactionField, TransactionDTO, Account, ManageMode, Transaction, IconType } from 'shared/models';\nimport { TABS, POSITIVE_NUMERIC_REGEX, ROUTES } from 'shared/constants';\nimport { getAccountLabel, getPageTitle, mapCategoryTypesWithTranslations, mapCurrencyStringToInputString, transactionHelper } from 'shared/helpers';\nimport FormInput from 'shared/components/FormInput';\nimport Button from 'shared/components/Button';\nimport Snackbar from 'shared/components/Snackbar';\nimport PageTitle from 'shared/components/PageTitle';\nimport CategoryIcon from 'shared/components/CategoryIcon';\nimport FormDatePicker from 'shared/components/FormDatePicker';\nimport FormSelect from 'shared/components/FormSelect';\nimport FormRadioGroup from 'shared/components/FormRadioGroup';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport AccountOption from 'shared/components/AccountOption';\nimport FormIcon from 'shared/components/FormIcon';\n\ninterface CreateEditTransactionProps {\n  mode: ManageMode;\n}\n\nconst CreateEditTransaction: React.FC<CreateEditTransactionProps> = ({ mode }) => {\n  const regex = POSITIVE_NUMERIC_REGEX;\n  const tabs = TABS;\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const { categories } = useAppSelector(selectCategory);\n  const categoryStatus = useAppSelector(selectCategoryStatus);\n  const { getStatus, createEditStatus, deleteStatus } = useAppSelector(selectTransaction);\n  const error = useAppSelector(selectTransactionError);\n  const { accounts } = useAppSelector(selectAccount);\n  const accountStatus = useAppSelector(selectAccountStatus);\n  const { defaultAccount = '' } = useAppSelector(selectSettings);\n  const transaction = useAppSelector(selectCurrentTransaction);\n  const { palette: { info: { contrastText } } } = useTheme();\n  const helper = transactionHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = createEditStatus === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const transactionId = state?.id as TransactionDTO['id'];\n  const transactionName = transaction?.nameKey ? t(transaction.nameKey) : (transaction?.name || '');\n  const categoryType = state?.categoryType as CategoryType || CategoryType.expense;\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n  const title = getPageTitle<Transaction>(mode, t, getStatus, 'TRANSACTIONS', 'NEW_TRANSACTION', 'EMPTY_TITLE', transaction);\n\n  const defaultValues: Partial<Transaction> = {\n    amount: '',\n    categoryId: '',\n    accountId: defaultAccount || '',\n    type: String(categoryType) as unknown as number,\n    createdAt: isCreateMode ? date().format() : undefined,\n    note: ''\n  };\n\n  const methods = useForm<Transaction>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { setValue, handleSubmit, watch, reset } = methods;\n  const watchType = watch(TransactionField.type);\n  const watchAccount = watch(TransactionField.accountId);\n  const watchCreatedAt = watch(TransactionField.createdAt);\n\n  const getCategoryData = (data: CategoryModel): CategoryModel => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name\n    };\n  };\n\n  const handleCategoryTypeChange = (value: string): void => {\n    const type = Number(value) as CategoryType;\n\n    setValue(TransactionField.type, type, { shouldValidate: true });\n    setValue(TransactionField.categoryId, defaultValues.categoryId as string);\n    setValue(TransactionField.icon, defaultValues.icon as IconType);\n    setValue(TransactionField.name, defaultValues.name as string);\n  };\n\n  const handleCategoryIconClick = ({ id, name, nameKey, icon }: CategoryModel): void => {\n    if (isViewMode) {\n      return;\n    }\n\n    setValue(TransactionField.categoryId, id, { shouldValidate: true });\n    setValue(TransactionField.icon, icon);\n    setValue(TransactionField.name, name, { shouldValidate: true });\n    setValue('nameKey', nameKey);\n  };\n\n  const handleAccountChange = (event: SelectChangeEvent<Account['id']>): void => {\n    setValue(TransactionField.accountId, event.target.value, { shouldValidate: true });\n  };\n\n  const handleDatePickerChange = (value: LocalizedDate | null): void => {\n    setValue(TransactionField.createdAt, value!.format(), { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Transaction): void => {\n    const mappedData: Omit<TransactionDTO, 'percentValue'> = {\n      ...data,\n      amount: Number(data.amount),\n      type: Number(data.type),\n      createdAt: date(data.createdAt).toDate()\n    };\n\n    isEditMode\n      ? dispatch(editTransaction([transactionId, mappedData]))\n      : dispatch(addTransaction(mappedData));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isCreateMode\n      ? navigate(ROUTES.dashboard.path)\n      : navigate(`${ROUTES.transactions.path}/view/${transactionName}`, { state: { id: transactionId } });\n  };\n\n  const handleDeleteTransaction = (): void => {\n    dispatch(deleteTransaction(transactionId));\n    setDeleteClicked(true);\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.transactions.path}/edit/${transactionName}`, { state: { id: transactionId } });\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (transaction) {\n      setValue(TransactionField.categoryId, transaction.categoryId);\n      setValue(TransactionField.accountId, transaction.accountId);\n      setValue(TransactionField.icon, transaction.icon);\n      setValue(TransactionField.amount, mapCurrencyStringToInputString(transaction.amount));\n      setValue(TransactionField.type, String(transaction.type) as unknown as number);\n      setValue(TransactionField.createdAt, transaction.createdAt);\n      setValue(TransactionField.note, transaction.note);\n      setValue('name', transaction.name);\n    }\n  }, [transaction, setValue]);\n\n  const resetTransaction = React.useCallback(() => {\n    dispatch(resetGetTransactionStatus());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    navigate(`${isCreateMode ? ROUTES.dashboard.path : ROUTES.transactions.path}`);\n    resetTransaction();\n  }, [navigate, resetTransaction, isCreateMode]);\n\n  React.useEffect(() => {\n    if (categoryStatus === 'idle') {\n      dispatch(getCategories());\n    }\n\n    if (accountStatus === 'idle') {\n      dispatch(getAccounts());\n    }\n  }, [dispatch, categoryStatus, accountStatus]);\n\n  React.useEffect(() => {\n    if (createEditStatus === 'succeeded' && formSubmitted) {\n      goBack();\n      setShowSnackbar(false);\n      dispatch(getAccounts());\n    }\n\n    if (createEditStatus === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [dispatch, goBack, createEditStatus, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (!transactionId) {\n      dispatch(setGetTransactionErrorStatus());\n    }\n  }, [transactionId, dispatch]);\n\n  React.useEffect(() => {\n    if (transactionId && getStatus === 'idle' && !isCreateMode && !deleteClicked) {\n      dispatch(getTransaction(transactionId));\n    }\n  }, [transactionId, isCreateMode, getStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setValue(TransactionField.accountId, defaultAccount);\n  }, [setValue, defaultAccount]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetTransaction();\n    };\n  }, [resetTransaction]);\n\n  const renderContent = (): React.ReactElement => {\n    if (getStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!transaction || !transactionId) && getStatus === 'failed') {\n      return <EmptyState text={t('TRANSACTIONS.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={7}>\n          <Grid item xs={12}>\n            <Typography color={contrastText}>{t('COMMON.TYPE')}</Typography>\n            <FormRadioGroup\n              readonly={isViewMode}\n              name={TransactionField.type}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.type.required!.message)\n                }\n              }}\n              options={mapCategoryTypesWithTranslations(tabs, t)}\n              labelColor={contrastText}\n              value={watchType}\n              onRadioChange={handleCategoryTypeChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.AMOUNT')}\n              type='number'\n              name={TransactionField.amount}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.amount.required!.message)\n                },\n                pattern: {\n                  value: regex,\n                  message: t(helper.amount.pattern!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormSelect\n              inputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.ACCOUNT')}\n              name={TransactionField.accountId}\n              value={accounts.length ? (watchAccount || defaultAccount) : ''}\n              onChange={handleAccountChange}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.accountId.required!.message)\n                }\n              }}\n              renderValue={(value) => (\n                <Typography>{getAccountLabel(value, accounts, t)}</Typography>\n              )}\n            >\n              {accounts.map((account) => (\n                <MenuItem key={account.id} value={account.id} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <AccountOption data={account} />\n                </MenuItem>\n              ))}\n            </FormSelect>\n          </Grid>\n          <Grid item xs={12}>\n            <FormDatePicker\n              readOnly={isViewMode}\n              name={TransactionField.createdAt}\n              label={t('COMMON.DATE')}\n              value={date(watchCreatedAt).isValid() ? date(watchCreatedAt) : null}\n              maxDate={date()}\n              rules={{\n                required: true,\n                validate: {\n                  maxDate: (value: string) =>\n                    Promise.resolve(date(value) <= date() || t(helper.createdAt.max!.message))\n                }\n              }}\n              onChange={handleDatePickerChange}\n              sx={{ width: '100%' }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              inputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.NOTE')}\n              name={TransactionField.note}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormIcon\n              name={TransactionField.categoryId}\n              label={t('COMMON.CATEGORY')}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.categoryId.required!.message)\n                }\n              }}\n              render={({ field }) => (\n                <Grid container {...field} columnGap={4} rowGap={4}>\n                  {\n                    categories.filter(({ type }) => type === Number(watchType)).map((category) => (\n                      <Grid item key={category.id}>\n                        <CategoryIcon data={getCategoryData(category)} selected={field.value} readonly={isViewMode} onItemClick={handleCategoryIconClick} />\n                      </Grid>\n                    ))\n                  }\n                </Grid>\n              )} />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode && !!transaction}\n        withDeleteButton={isEditMode && !!transaction}\n        withCancelButton={!isViewMode && !!transaction}\n        text={title}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4, marginBottom: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save transaction' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' open={showSnackbar} text={error?.messageKey ? t(error.messageKey) : error?.message || ''} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('TRANSACTIONS.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteTransaction}\n      >\n        <Typography variant='subtitle1'>\n          {t('TRANSACTIONS.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditTransaction;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport TransactionList from './pages/TransactionList';\nimport CreateEditTransaction from './pages/CreateEditTransaction';\n\nconst Transactions: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<TransactionList />} />\n      <Route path='/new' element={<CreateEditTransaction mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditTransaction mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditTransaction mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.accounts.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Transactions;\n","import * as React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { DatePicker as MuiDatePicker, DatePickerProps as MuiDatePickerProps } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { LocalizedDate } from 'core/date';\nimport { FormControlRules } from 'shared/models';\n\ntype FormDatePickerProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & MuiDatePickerProps<LocalizedDate>;\n\nconst FormDatePicker: React.FC<FormDatePickerProps> = ({ name, label, rules = {}, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer sx={{ ...props.sx, paddingTop: 2, overflow: 'initial' }} components={['DatePicker']}>\n        <Controller\n          control={control}\n          name={name}\n          rules={rules}\n          render={({ field, fieldState: { error } }) => (\n            <Box position='relative' sx={{ width: '100%' }}>\n              <InputLabel>{label}</InputLabel>\n              <MuiDatePicker\n                {...field}\n                {...props} />\n              {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n            </Box>\n          )}\n        />\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n};\n\nexport default FormDatePicker;\n","import * as React from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport Select, { SelectProps } from '@mui/material/Select';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport { FormControlRules } from 'shared/models';\n\nexport interface SelectOption {\n  label: string;\n  value: string;\n}\n\ntype FormSelectProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & SelectProps<SelectOption['value']>;\n\nconst FormSelect: React.FC<FormSelectProps> = ({ name, label, rules = {}, children, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      rules={rules}\n      render={({ field, fieldState: { error } }) => (\n        <Box position='relative'>\n          <InputLabel>{label}</InputLabel>\n          <Select\n            fullWidth\n            variant='outlined'\n            error={!!errors[name]}\n            {...field}\n            {...props}>\n            {children}\n          </Select>\n          {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n        </Box>\n      )}\n    />\n  );\n};\n\nexport default FormSelect;\n"],"names":["_ref","data","onClick","_useTheme$palette","useTheme","palette","_useTheme$palette$pri","primary","main","contrastText","error","name","icon","accountName","accountIcon","createdAt","amount","type","formattedCreatedAt","date","format","DATE_FORMAT","_jsx","Paper","elevation","sx","paddingX","backgroundColor","children","_jsxs","Grid","container","columnSpacing","alignItems","minHeight","cursor","item","xs","display","Icon","color","fontSize","sm","Typography","noWrap","justifyContent","CategoryType","dispatch","useAppDispatch","_useAppSelector","useAppSelector","selectTransaction","transactions","status","navigate","useNavigate","t","useTranslation","React","getTransactions","handleTransactionClick","id","concat","ROUTES","state","Box","flexGrow","PageTitle","text","rowGap","Skeleton","length","_Fragment","map","transaction","Transaction","_objectSpread","nameKey","accountNameKey","EmptyState","mode","regex","POSITIVE_NUMERIC_REGEX","tabs","TABS","useLocation","categories","selectCategory","categoryStatus","selectCategoryStatus","_useAppSelector2","getStatus","createEditStatus","deleteStatus","selectTransactionError","accounts","selectAccount","accountStatus","selectAccountStatus","_useAppSelector4$defa","selectSettings","defaultAccount","selectCurrentTransaction","info","helper","transactionHelper","_React$useState","_React$useState2","_slicedToArray","formSubmitted","setFormSubmitted","_React$useState3","_React$useState4","deleteClicked","setDeleteClicked","_React$useState5","_React$useState6","showSnackbar","setShowSnackbar","_React$useState7","_React$useState8","dialogOpened","setDialogOpened","loading","deleteLoading","transactionId","transactionName","categoryType","isCreateMode","ManageMode","isEditMode","isViewMode","title","getPageTitle","defaultValues","categoryId","accountId","String","undefined","note","methods","useForm","reValidateMode","setValue","handleSubmit","watch","reset","watchType","TransactionField","watchAccount","watchCreatedAt","handleCategoryTypeChange","value","Number","shouldValidate","handleCategoryIconClick","_ref2","handleAccountChange","event","target","handleDatePickerChange","handleFormSubmit","mappedData","toDate","editTransaction","addTransaction","setFormValues","mapCurrencyStringToInputString","resetTransaction","resetGetTransactionStatus","goBack","getCategories","getAccounts","setGetTransactionErrorStatus","getTransaction","component","flexDirection","onSubmit","withBackButton","withEditButton","withDeleteButton","withCancelButton","onBackButtonClick","onEditButtonClick","onDeleteButtonClick","onCancelButtonClick","FormProvider","FormRadioGroup","readonly","rules","required","message","options","mapCategoryTypesWithTranslations","labelColor","onRadioChange","FormInput","InputProps","readOnly","label","pattern","FormSelect","inputProps","onChange","renderValue","getAccountLabel","account","MenuItem","AccountOption","FormDatePicker","isValid","maxDate","validate","Promise","resolve","max","width","FormIcon","render","_ref3","field","columnGap","filter","_ref4","category","CategoryIcon","selected","onItemClick","marginTop","marginBottom","Button","fullWidth","variant","Snackbar","open","messageKey","onClose","Dialog","maxWidth","actionButtonText","onAction","deleteTransaction","Routes","Route","path","element","TransactionList","CreateEditTransaction","Navigate","to","replace","_ref$rules","props","_objectWithoutProperties","_excluded","_useFormContext","useFormContext","control","errors","formState","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","paddingTop","overflow","components","Controller","fieldState","position","InputLabel","MuiDatePicker","FormHelperText","Select"],"sourceRoot":""}