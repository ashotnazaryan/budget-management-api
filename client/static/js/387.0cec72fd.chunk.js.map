{"version":3,"file":"static/js/387.0cec72fd.chunk.js","mappings":"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","sources":["modules/Transfers/pages/CreateEditTransfer.tsx","modules/Transfers/components/Transfer.tsx","modules/Transfers/pages/TransferList.tsx","modules/Transfers/Transfers.tsx","shared/components/AccountOption.tsx","shared/components/EmptyState.tsx","shared/components/FormDatePicker.tsx","shared/components/FormInput.styles.ts","shared/components/FormInput.tsx","shared/components/FormSelect.tsx","shared/components/Icon.tsx","shared/components/BackButton.tsx","shared/components/EditButton.tsx","shared/components/DeleteButton.tsx","shared/components/CancelButton.tsx","shared/components/PageTitle.tsx","shared/components/Skeleton.tsx","shared/components/Snackbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport date, { LocalizedDate } from 'core/date';\nimport { useTranslation } from 'core/i18n';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  createTransfer,\n  deleteTransfer,\n  editTransfer,\n  getAccounts,\n  getTransfer,\n  resetCurrentTransfer,\n  selectAccount,\n  selectAccountStatus,\n  selectCurrentTransfer,\n  selectTransfer,\n  selectTransferError\n} from 'store/reducers';\nimport { POSITIVE_NUMERIC_REGEX, ROUTES } from 'shared/constants';\nimport { Account, ManageMode, Transfer, TransferDTO, TransferField } from 'shared/models';\nimport { transferHelper, getAccountLabel, mapCurrencyStringToInputString } from 'shared/helpers';\nimport PageTitle from 'shared/components/PageTitle';\nimport Button from 'shared/components/Button';\nimport FormSelect from 'shared/components/FormSelect';\nimport FormInput from 'shared/components/FormInput';\nimport FormDatePicker from 'shared/components/FormDatePicker';\nimport Snackbar from 'shared/components/Snackbar';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport AccountOption from 'shared/components/AccountOption';\n\ninterface CreateEditTransferProps {\n  mode: ManageMode;\n}\n\nconst CreateEditTransfer: React.FC<CreateEditTransferProps> = ({ mode }) => {\n  const regex = POSITIVE_NUMERIC_REGEX;\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const { status, currentStatus, deleteStatus } = useAppSelector(selectTransfer);\n  const error = useAppSelector(selectTransferError);\n  const transfer = useAppSelector(selectCurrentTransfer);\n  const { accounts } = useAppSelector(selectAccount);\n  const accountStatus = useAppSelector(selectAccountStatus);\n  const helper = transferHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = status === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n  const { id } = useParams() as { id: string };\n\n  const defaultValues: Partial<Transfer> = {\n    fromAccount: {} as Account,\n    toAccount: {} as Account,\n    amount: '',\n    createdAt: isCreateMode ? date().format() : undefined,\n  };\n\n  const methods = useForm<Transfer>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { handleSubmit, setValue, watch, reset } = methods;\n  const watchFromAccount = watch(TransferField.fromAccount);\n  const watchToAccount = watch(TransferField.toAccount);\n  const watchCreatedAt = watch(TransferField.createdAt);\n\n  const handleFromAccountChange = (event: SelectChangeEvent<Account['id']>) => {\n    const fromAccount = accounts.find(({ id }) => id === event.target.value);\n\n    setValue(TransferField.fromAccount, fromAccount!, { shouldValidate: true });\n  };\n\n  const handleToAccountChange = (event: SelectChangeEvent<Account['id']>) => {\n    const toAccount = accounts.find(({ id }) => id === event.target.value);\n\n    setValue(TransferField.toAccount, toAccount!, { shouldValidate: true });\n  };\n\n  const handleDatePickerChange = (value: LocalizedDate | null): void => {\n    setValue(TransferField.createdAt, value!.format(), { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Transfer): void => {\n    const mappedData: TransferDTO = {\n      ...data,\n      amount: Number(data.amount),\n      fromAccount: data.fromAccount.id,\n      toAccount: data.toAccount.id,\n      createdAt: date(data.createdAt).toDate()\n    };\n\n    isEditMode\n      ? dispatch(editTransfer([id, mappedData]))\n      : dispatch(createTransfer(mappedData));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isCreateMode\n      ? navigate(ROUTES.accounts.path)\n      : navigate(`${ROUTES.transfers.path}/view/${id}`);\n  };\n\n  const handleDeleteTransfer = (): void => {\n    dispatch(deleteTransfer(id));\n    setDeleteClicked(true);\n  };\n\n  const getTitle = (): string => {\n    return isEditMode ? t('TRANSFERS.EDIT_TRANSFER') : (isViewMode ? t('TRANSFERS.VIEW_TRANSFER') : t('TRANSFERS.NEW_TRANSFER'));\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.transfers.path}/edit/${id}`);\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (transfer) {\n      setValue(TransferField.fromAccount, transfer.fromAccount);\n      setValue(TransferField.toAccount, transfer.toAccount);\n      setValue(TransferField.amount, mapCurrencyStringToInputString(transfer.amount));\n      setValue(TransferField.createdAt, transfer.createdAt);\n    }\n  }, [transfer, setValue]);\n\n  const resetTransfer = React.useCallback(() => {\n    dispatch(resetCurrentTransfer());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    isCreateMode\n      ? navigate(ROUTES.accounts.path)\n      : navigate(ROUTES.transfers.path);\n\n    resetTransfer();\n  }, [navigate, isCreateMode, resetTransfer]);\n\n  React.useEffect(() => {\n    if (accountStatus === 'idle') {\n      dispatch(getAccounts());\n    }\n  }, [dispatch, accountStatus]);\n\n  React.useEffect(() => {\n    if (status === 'succeeded' && formSubmitted) {\n      dispatch(getAccounts());\n      goBack();\n      setShowSnackbar(false);\n    }\n\n    if (status === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [dispatch, goBack, status, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (id && currentStatus === 'idle' && !isCreateMode && !deleteClicked) {\n      dispatch(getTransfer(id));\n    }\n  }, [id, isCreateMode, currentStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetTransfer();\n    };\n  }, [resetTransfer]);\n\n  const renderContent = (): React.ReactElement => {\n    if (currentStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!transfer || !id)) {\n      return <EmptyState text={t('TRANSFERS.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={6} columnSpacing={2}>\n          <Grid item sm={6} xs={12}>\n            <FormSelect\n              disabled={!isCreateMode}\n              label={t('ACCOUNTS.FROM_ACCOUNT')}\n              name={TransferField.fromAccount}\n              value={watchFromAccount.id || ''}\n              onChange={handleFromAccountChange}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.fromAccount.required!.message)\n                }\n              }}\n              renderValue={(value) => (\n                <Typography>{getAccountLabel(value, accounts, t)}</Typography>\n              )}\n            >\n              {accounts.map((account) => (\n                <MenuItem key={account.id} value={account.id} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <AccountOption data={account} />\n                </MenuItem>\n              ))}\n            </FormSelect>\n          </Grid>\n          <Grid item sm={6} xs={12}>\n            <FormSelect\n              disabled={!isCreateMode}\n              label={t('ACCOUNTS.TO_ACCOUNT')}\n              name={TransferField.toAccount}\n              value={watchToAccount.id || ''}\n              onChange={handleToAccountChange}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.toAccount.required!.message)\n                }\n              }}\n              renderValue={(value) => (\n                <Typography>{getAccountLabel(value, accounts, t)}</Typography>\n              )}\n            >\n              {accounts.map((account) => (\n                <MenuItem key={account.id} value={account.id} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <AccountOption data={account} />\n                </MenuItem>\n              ))}\n            </FormSelect>\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.AMOUNT')}\n              type='number'\n              name={TransferField.amount}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.amount.required!.message)\n                },\n                pattern: {\n                  value: regex,\n                  message: t(helper.amount.pattern!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormDatePicker\n              readOnly={isViewMode}\n              name={TransferField.createdAt}\n              label={t('COMMON.DATE')}\n              value={date(watchCreatedAt).isValid() ? date(watchCreatedAt) : null}\n              maxDate={date()}\n              rules={{\n                required: true,\n                validate: {\n                  maxDate: (value: string) =>\n                    Promise.resolve(date(value) <= date() || t(helper.createdAt.max!.message))\n                }\n              }}\n              onChange={handleDatePickerChange}\n              sx={{ width: '100%' }}\n            />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode}\n        withDeleteButton={isEditMode}\n        withCancelButton={!isViewMode}\n        text={getTitle()}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save transfer' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' open={showSnackbar} text={error?.messageKey ? t(error.messageKey) : error?.message || ''} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('TRANSFERS.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteTransfer}\n      >\n        <Typography variant='subtitle1'>\n          {t('TRANSFERS.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditTransfer;\n","import * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport date from 'core/date';\nimport { Transfer as TransferModel } from 'shared/models';\nimport { DATE_FORMAT } from 'shared/constants';\n\ninterface TransferProps {\n  data: TransferModel;\n  onClick?: (data: TransferModel) => void;\n}\n\nconst Transfer: React.FC<TransferProps> = ({ data, onClick }) => {\n  const { palette: { primary: { main, contrastText } } } = useTheme();\n  const { fromAccount, toAccount, createdAt, amount } = data;\n  const formattedCreatedAt = date(createdAt).format(DATE_FORMAT);\n\n  const onTransactionClick = (): void => {\n    if (onClick) {\n      onClick(data);\n    }\n  };\n\n  return (\n    <Paper elevation={1} sx={{ paddingX: 2, backgroundColor: main }} onClick={onTransactionClick}>\n      <Grid container columnSpacing={2} alignItems='center' sx={{ minHeight: 40, cursor: 'pointer' }}>\n        <Grid item xs={3}>\n          <Typography noWrap color={contrastText}>{fromAccount.name}</Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography noWrap color={contrastText}>{toAccount.name}</Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography noWrap color={contrastText}>{amount}</Typography>\n        </Grid>\n        <Grid item xs={3} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText}>{formattedCreatedAt}</Typography>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Transfer;\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Box from '@mui/system/Box';\nimport Grid from '@mui/material/Grid';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getTransfers, selectTransfer } from 'store/reducers';\nimport { Transfer as TransferModel } from 'shared/models';\nimport { ROUTES } from 'shared/constants';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport EmptyState from 'shared/components/EmptyState';\nimport Transfer from '../components/Transfer';\n\ninterface TransferListProps { }\n\nconst TransferList: React.FC<TransferListProps> = () => {\n  const dispatch = useAppDispatch();\n  const { transfers, status } = useAppSelector(selectTransfer);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  const getTransferData = (data: TransferModel): TransferModel => {\n    return {\n      ...data,\n      fromAccount: {\n        ...data.fromAccount,\n        name: data.fromAccount.nameKey ? t(data.fromAccount.nameKey) : data.fromAccount.name\n      }\n    };\n  };\n\n  const goBack = (): void => {\n    navigate(`${ROUTES.accounts.path}`);\n  };\n\n  const handleTransferItemClick = ({ id }: TransferModel): void => {\n    navigate(`${ROUTES.transfers.path}/view/${id}`, { state: { id } });\n  };\n\n  React.useEffect(() => {\n    if (status === 'idle' || status === 'failed') {\n      dispatch(getTransfers());\n    }\n  }, [dispatch, status]);\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading' || status !== 'succeeded') {\n      return <Skeleton type='list' />;\n    }\n\n    if (!transfers?.length) {\n      return <EmptyState text={t('TRANSFERS.EMPTY_TEXT')} />;\n    }\n\n    return (\n      <Grid container rowGap={2}>\n        {\n          transfers.map((transfer) => (\n            <Grid item key={transfer.id} xs={12}>\n              <Transfer data={getTransferData(transfer)} onClick={handleTransferItemClick} />\n            </Grid>\n          ))\n        }\n      </Grid>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle withBackButton text={t('TRANSFERS.PAGE_TITLE')} onBackButtonClick={goBack} />\n      {renderContent()}\n    </Box>\n  );\n};\n\nexport default TransferList;","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport CreateEditTransfer from './pages/CreateEditTransfer';\nimport TransferList from './pages/TransferList';\n\nconst Transfers: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<TransferList />} />\n      <Route path='/new' element={<CreateEditTransfer mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditTransfer mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditTransfer mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.transfers.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Transfers;\n","import * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { useTranslation } from 'core/i18n';\nimport { Account } from 'shared/models';\nimport Balance from 'shared/components/Balance';\n\ninterface AccountOptionProps {\n  data: Account;\n}\n\nconst AccountOption: React.FC<AccountOptionProps> = ({ data }) => {\n  const { name, nameKey, balance } = data;\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Typography>{nameKey ? t(nameKey) : name}</Typography>\n      <Balance balance={balance} />\n    </>\n  );\n};\n\nexport default AccountOption;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\n\ninterface EmptyStateProps {\n  text: string | null;\n}\n\nconst EmptyState: React.FC<EmptyStateProps> = ({ text = 'No data is available' }) => {\n  const { palette: { info: { contrastText } } } = useTheme();\n\n  return (\n    <Box display='flex' justifyContent='center'>\n      <Typography noWrap color={contrastText} fontSize={{ sm: 18, xs: 16 }}>{text}</Typography>\n    </Box>\n  );\n};\n\nexport default EmptyState;\n","import * as React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { DatePicker as MuiDatePicker, DatePickerProps as MuiDatePickerProps } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { LocalizedDate } from 'core/date';\nimport { FormControlRules } from 'shared/models';\n\ntype FormDatePickerProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & MuiDatePickerProps<LocalizedDate>;\n\nconst FormDatePicker: React.FC<FormDatePickerProps> = ({ name, label, rules = {}, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer sx={{ paddingTop: 2, overflow: 'initial' }} components={['DatePicker']}>\n        <Controller\n          control={control}\n          name={name}\n          rules={rules}\n          render={({ field, fieldState: { error } }) => (\n            <Box position='relative'>\n              <InputLabel>{label}</InputLabel>\n              <MuiDatePicker\n                {...field}\n                {...props} />\n              {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n            </Box>\n          )}\n        />\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n};\n\nexport default FormDatePicker;\n","import styled from '@emotion/styled';\nimport TextField from '@mui/material/TextField';\nimport { Theme } from '@mui/material/styles';\n\ninterface StyledTextFieldProps {\n  theme: Theme;\n}\n\nexport const StyledTextField = styled(TextField)<StyledTextFieldProps>`\n  &.MuiInputBase-input {\n    border-color: ${(props) => props.theme.palette.primary.main};\n    color: ${(props) => props.theme.palette.primary.main};\n  },\n  &.MuiOutlinedInput-root {\n    &.Mui-error {\n      & .MuiOutlinedInput-notchedOutline: {\n        border-color: ${(props) => props.theme.palette.error.main},\n      }\n    }\n    border-color: ${(props) => props.theme.palette.primary.main};\n    color: ${(props) => props.theme.palette.error.main};\n  }\n`;\n","import * as React from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport { FormControlRules } from 'shared/models';\nimport { StyledTextField } from './FormInput.styles';\n\ntype FormInputProps = {\n  name: string;\n  rules?: FormControlRules;\n} & TextFieldProps;\n\nconst FormInput: React.FC<FormInputProps> = ({ name, rules = {}, ...props }) => {\n  const theme = useTheme();\n\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      rules={rules}\n      render={({ field, fieldState: { error } }) => (\n        <Box position='relative'>\n          <StyledTextField\n            fullWidth\n            {...field}\n            {...props}\n            theme={theme}\n            error={!!errors[name]}\n          />\n          {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n        </Box>\n      )}\n    />\n  );\n};\n\nexport default FormInput;\n","import * as React from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport Select, { SelectProps } from '@mui/material/Select';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport { FormControlRules } from 'shared/models';\n\nexport interface SelectOption {\n  label: string;\n  value: string;\n}\n\ntype FormSelectProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & SelectProps<SelectOption['value']>;\n\nconst FormSelect: React.FC<FormSelectProps> = ({ name, label, rules = {}, children, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      rules={rules}\n      render={({ field, fieldState: { error } }) => (\n        <Box position='relative'>\n          <InputLabel>{label}</InputLabel>\n          <Select\n            fullWidth\n            variant='outlined'\n            error={!!errors[name]}\n            {...field}\n            {...props}>\n            {children}\n          </Select>\n          {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n        </Box>\n      )}\n    />\n  );\n};\n\nexport default FormSelect;\n","import * as React from 'react';\nimport { IconProps } from '@mui/material/Icon';\nimport { ALL_ICONS } from 'shared/constants';\nimport { IconType } from 'shared/models';\n\ntype IconComponentProps = {\n  name: string;\n} & Partial<IconProps<any>>;\n\nconst IconComponent: React.FC<IconComponentProps> = ({ name = IconType.default, fontSize = 'large', ...props }) => {\n  const Icon = ALL_ICONS[name];\n\n  return <Icon {...props} fontSize={fontSize} sx={{ ...props.sx }}></Icon>;\n};\n\nexport default IconComponent;\n","import * as React from 'react';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport { IconType } from 'shared/models';\nimport Icon from './Icon';\n\ntype BackButtonProps = IconButtonProps;\n\nconst BackButton: React.FC<BackButtonProps> = ({ ...props }) => {\n  return (\n    <IconButton\n      {...props}\n      color='primary'\n      size='small'\n      sx={{\n        ...props.sx,\n      }}\n      onClick={props.onClick}>\n      <Icon name={IconType.arrowBack}></Icon>\n    </IconButton>\n  );\n};\n\nexport default BackButton;\n","import * as React from 'react';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport { IconType } from 'shared/models';\nimport Icon from './Icon';\n\ntype EditButtonProps = IconButtonProps;\n\nconst EditButton: React.FC<EditButtonProps> = ({ ...props }) => {\n  return (\n    <IconButton\n      {...props}\n      color='primary'\n      size='small'\n      sx={{\n        ...props.sx,\n      }}\n      onClick={props.onClick}>\n      <Icon name={IconType.edit}></Icon>\n    </IconButton>\n  );\n};\n\nexport default EditButton;\n","import * as React from 'react';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport { IconType } from 'shared/models';\nimport Icon from './Icon';\n\ntype DeleteButtonProps = IconButtonProps;\n\nconst DeleteButton: React.FC<DeleteButtonProps> = ({ ...props }) => {\n  return (\n    <IconButton\n      {...props}\n      color='secondary'\n      size='small'\n      sx={{\n        ...props.sx,\n      }}\n      onClick={props.onClick}>\n      <Icon name={IconType.delete}></Icon>\n    </IconButton>\n  );\n};\n\nexport default DeleteButton;\n","import * as React from 'react';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport { IconType } from 'shared/models';\nimport Icon from './Icon';\n\ntype CancelButtonProps = IconButtonProps;\n\nconst CancelButton: React.FC<CancelButtonProps> = ({ ...props }) => {\n  return (\n    <IconButton\n      {...props}\n      color='secondary'\n      size='small'\n      sx={{\n        ...props.sx,\n      }}\n      onClick={props.onClick}>\n      <Icon name={IconType.cancel}></Icon>\n    </IconButton>\n  );\n};\n\nexport default CancelButton;\n","import * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport Box, { BoxProps } from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport BackButton from './BackButton';\nimport EditButton from './EditButton';\nimport DeleteButton from './DeleteButton';\nimport CancelButton from './CancelButton';\n\ntype PageTitleProps = {\n  text: string;\n  withBackButton?: boolean;\n  withEditButton?: boolean;\n  withDeleteButton?: boolean;\n  withCancelButton?: boolean;\n  onBackButtonClick?: () => void;\n  onEditButtonClick?: () => void;\n  onDeleteButtonClick?: () => void;\n  onCancelButtonClick?: () => void;\n} & BoxProps;\n\nconst PageTitle: React.FC<PageTitleProps> = ({\n  text,\n  withBackButton = false,\n  withEditButton = false,\n  withDeleteButton = false,\n  withCancelButton = false,\n  onBackButtonClick,\n  onEditButtonClick,\n  onDeleteButtonClick,\n  onCancelButtonClick,\n  ...props\n}) => {\n  const { palette: { info: { contrastText } } } = useTheme();\n\n  const onBackClick = (): void => {\n    if (onBackButtonClick) {\n      onBackButtonClick();\n    }\n  };\n\n  const onEditClick = (): void => {\n    if (onEditButtonClick) {\n      onEditButtonClick();\n    }\n  };\n\n  const onDeleteClick = (): void => {\n    if (onDeleteButtonClick) {\n      onDeleteButtonClick();\n    }\n  };\n\n  const onCancelClick = (): void => {\n    if (onCancelButtonClick) {\n      onCancelButtonClick();\n    }\n  };\n\n  return (\n    <Box\n      display='flex'\n      alignItems='center'\n      {...props}\n      sx={{ ...props.sx, marginTop: 2, marginBottom: 5 }}\n    >\n      {withBackButton && <BackButton onClick={onBackClick} />}\n      <Typography\n        color={contrastText}\n        sx={{\n          width: '100%',\n          textAlign: 'center',\n          fontSize: { sm: 22, xs: 18 },\n          fontWeight: 'bold'\n        }}>\n        {text}\n      </Typography>\n      {withEditButton && <EditButton onClick={onEditClick} />}\n      {withDeleteButton && <DeleteButton onClick={onDeleteClick} />}\n      {withCancelButton && <CancelButton onClick={onCancelClick} />}\n    </Box>\n  );\n};\n\nexport default PageTitle;\n","import * as React from 'react';\nimport MuiSkeleton, { SkeletonProps as MuiSkeletonProps } from '@mui/material/Skeleton';\nimport Grid from '@mui/material/Grid';\n\ntype SkeletonProps = {\n  type: 'list' | 'form' | 'summary' | 'circular'\n} & MuiSkeletonProps;\n\nconst Skeleton: React.FC<SkeletonProps> = ({ type, ...props }) => {\n  const isCircular = type === 'circular';\n  const isForm = type === 'form';\n\n  const getSize = () => {\n    switch (type) {\n    case 'list':\n      return { firstBar: 40, secondBar: 40, thirdBar: 40 };\n\n    case 'form':\n      return { firstBar: 56, secondBar: 56, thirdBar: 56 };\n\n    case 'summary':\n      return { firstBar: 30, secondBar: 60, thirdBar: 120 };\n\n    case 'circular':\n      return { firstBar: 64, secondBar: 64, thirdBar: 64 };\n\n    default:\n      return { firstBar: 40, secondBar: 40, thirdBar: 40 };\n    }\n  };\n\n  return isCircular\n    ? (\n      <Grid container columnGap={4}>\n        <Grid item width={100} display='flex' justifyContent='center'>\n          <MuiSkeleton {...props} variant='circular' height={getSize().firstBar} width={getSize().firstBar} />\n        </Grid>\n        <Grid item width={100} display='flex' justifyContent='center'>\n          <MuiSkeleton {...props} variant='circular' height={getSize().secondBar} width={getSize().secondBar} />\n        </Grid>\n        <Grid item width={100} display='flex' justifyContent='center'>\n          <MuiSkeleton {...props} variant='circular' height={getSize().thirdBar} width={getSize().firstBar} />\n        </Grid>\n      </Grid>\n    )\n    : (\n      <Grid container justifyContent='center' rowGap={isForm ? 5 : 2}>\n        <Grid item xs={12}>\n          <MuiSkeleton {...props} variant='rounded' height={getSize().firstBar} />\n        </Grid>\n        <Grid item xs={12}>\n          <MuiSkeleton {...props} variant='rounded' animation='wave' height={getSize().secondBar} />\n        </Grid>\n        <Grid item xs={12}>\n          <MuiSkeleton {...props} variant='rounded' height={getSize().thirdBar} />\n        </Grid>\n      </Grid>\n    );\n};\n\nexport default Skeleton;\n","import * as React from 'react';\nimport MuiAlert, { AlertColor } from '@mui/material/Alert';\nimport MuiSnackbar, { SnackbarProps as MuiSnackbarProps } from '@mui/material/Snackbar';\n\ntype SnackbarProps = {\n  open: boolean;\n  text: string;\n  type: AlertColor;\n  onClose: () => void;\n} & MuiSnackbarProps;\n\nconst Snackbar: React.FC<SnackbarProps> = ({ open = false, text, type, onClose, ...props }) => {\n\n  const onSnackbarClose = (): void => {\n    onClose();\n  };\n\n  return (\n    <MuiSnackbar\n      open={open}\n      autoHideDuration={5000}\n      onClose={onSnackbarClose}\n      {...props}\n    >\n      <MuiAlert severity={type}>\n        {text}\n      </MuiAlert>\n    </MuiSnackbar>\n  );\n};\n\nexport default Snackbar;\n"],"names":["_ref","mode","regex","POSITIVE_NUMERIC_REGEX","navigate","useNavigate","dispatch","useAppDispatch","_useAppSelector","useAppSelector","selectTransfer","status","currentStatus","deleteStatus","error","selectTransferError","transfer","selectCurrentTransfer","accounts","selectAccount","accountStatus","selectAccountStatus","helper","transferHelper","t","useTranslation","_React$useState","React","_React$useState2","_slicedToArray","formSubmitted","setFormSubmitted","_React$useState3","_React$useState4","showSnackbar","setShowSnackbar","_React$useState5","_React$useState6","deleteClicked","setDeleteClicked","_React$useState7","_React$useState8","dialogOpened","setDialogOpened","loading","deleteLoading","isCreateMode","ManageMode","isEditMode","isViewMode","id","useParams","defaultValues","fromAccount","toAccount","amount","createdAt","date","format","undefined","methods","useForm","reValidateMode","handleSubmit","setValue","watch","reset","watchFromAccount","TransferField","watchToAccount","watchCreatedAt","handleFromAccountChange","event","find","_ref3","target","value","shouldValidate","handleToAccountChange","_ref4","handleDatePickerChange","handleFormSubmit","data","mappedData","_objectSpread","Number","toDate","editTransfer","createTransfer","setFormValues","mapCurrencyStringToInputString","resetTransfer","resetCurrentTransfer","goBack","ROUTES","getAccounts","getTransfer","_jsxs","Box","component","display","flexDirection","flexGrow","onSubmit","children","_jsx","PageTitle","withBackButton","withEditButton","withDeleteButton","withCancelButton","text","onBackButtonClick","onEditButtonClick","concat","onDeleteButtonClick","onCancelButtonClick","Skeleton","type","FormProvider","Grid","container","rowGap","columnSpacing","item","sm","xs","FormSelect","disabled","label","name","onChange","rules","required","message","renderValue","Typography","getAccountLabel","map","account","MenuItem","sx","justifyContent","AccountOption","FormInput","InputProps","readOnly","pattern","FormDatePicker","isValid","maxDate","validate","Promise","resolve","max","width","EmptyState","columnGap","marginTop","Button","fullWidth","variant","onClick","Snackbar","open","messageKey","onClose","Dialog","maxWidth","title","actionButtonText","onAction","deleteTransfer","_useTheme$palette$pri","useTheme","palette","primary","main","contrastText","formattedCreatedAt","DATE_FORMAT","Paper","elevation","paddingX","backgroundColor","alignItems","minHeight","cursor","noWrap","color","transfers","handleTransferItemClick","state","getTransfers","length","Transfer","nameKey","Routes","Route","path","element","TransferList","CreateEditTransfer","Navigate","to","replace","balance","_Fragment","Balance","_ref$text","info","fontSize","_ref$rules","props","_objectWithoutProperties","_excluded","_useFormContext","useFormContext","control","errors","formState","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","paddingTop","overflow","components","Controller","render","_ref2","field","fieldState","position","InputLabel","MuiDatePicker","FormHelperText","StyledTextField","styled","TextField","_templateObject","_taggedTemplateLiteral","theme","Select","_ref$name","IconType","_ref$fontSize","Icon","ALL_ICONS","Object","assign","_objectDestructuringEmpty","IconButton","size","_ref$withBackButton","_ref$withEditButton","_ref$withDeleteButton","_ref$withCancelButton","marginBottom","BackButton","textAlign","fontWeight","EditButton","DeleteButton","CancelButton","isForm","getSize","firstBar","secondBar","thirdBar","MuiSkeleton","height","animation","_ref$open","MuiSnackbar","autoHideDuration","MuiAlert","severity"],"sourceRoot":""}