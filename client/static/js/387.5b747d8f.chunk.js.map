{"version":3,"file":"static/js/387.5b747d8f.chunk.js","mappings":"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","sources":["modules/Transfers/pages/CreateEditTransfer.tsx","modules/Transfers/components/Transfer.tsx","modules/Transfers/pages/TransferList.tsx","modules/Transfers/Transfers.tsx","shared/components/EmptyState.tsx","shared/components/FormDatePicker.tsx","shared/components/FormInput.styles.ts","shared/components/FormInput.tsx","shared/components/FormSelect.tsx","shared/components/Skeleton.tsx","shared/components/Snackbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport date, { LocalizedDate } from 'core/date';\nimport { useTranslation } from 'core/i18n';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  createTransfer,\n  deleteTransfer,\n  editTransfer,\n  getAccounts,\n  getTransfer,\n  resetGetTransferStatus,\n  selectAccount,\n  selectAccountStatus,\n  selectCurrentTransfer,\n  selectTransfer,\n  selectTransferError,\n  setGetTransferErrorStatus\n} from 'store/reducers';\nimport { POSITIVE_NUMERIC_REGEX, ROUTES } from 'shared/constants';\nimport { Account, ManageMode, Transfer, TransferDTO, TransferField } from 'shared/models';\nimport { transferHelper, getAccountLabel, mapCurrencyStringToInputString } from 'shared/helpers';\nimport PageTitle from 'shared/components/PageTitle';\nimport Button from 'shared/components/Button';\nimport FormSelect from 'shared/components/FormSelect';\nimport FormInput from 'shared/components/FormInput';\nimport FormDatePicker from 'shared/components/FormDatePicker';\nimport Snackbar from 'shared/components/Snackbar';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport AccountOption from 'shared/components/AccountOption';\n\ninterface CreateEditTransferProps {\n  mode: ManageMode;\n}\n\nconst CreateEditTransfer: React.FC<CreateEditTransferProps> = ({ mode }) => {\n  const regex = POSITIVE_NUMERIC_REGEX;\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const { getStatus, createEditStatus, deleteStatus } = useAppSelector(selectTransfer);\n  const error = useAppSelector(selectTransferError);\n  const transfer = useAppSelector(selectCurrentTransfer);\n  const { accounts } = useAppSelector(selectAccount);\n  const accountStatus = useAppSelector(selectAccountStatus);\n  const helper = transferHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = createEditStatus === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n  const { id } = useParams() as { id: string };\n\n  const defaultValues: Partial<Transfer> = {\n    fromAccount: '' as unknown as Account,\n    toAccount: '' as unknown as Account,\n    amount: '',\n    createdAt: isCreateMode ? date().format() : undefined,\n  };\n\n  const methods = useForm<Transfer>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { handleSubmit, setValue, watch, reset } = methods;\n  const watchFromAccount = watch(TransferField.fromAccount);\n  const watchToAccount = watch(TransferField.toAccount);\n  const watchCreatedAt = watch(TransferField.createdAt);\n\n  const handleFromAccountChange = (event: SelectChangeEvent<Account['id']>) => {\n    const fromAccount = accounts.find(({ id }) => id === event.target.value);\n\n    setValue(TransferField.fromAccount, fromAccount!, { shouldValidate: true });\n  };\n\n  const handleToAccountChange = (event: SelectChangeEvent<Account['id']>) => {\n    const toAccount = accounts.find(({ id }) => id === event.target.value);\n\n    setValue(TransferField.toAccount, toAccount!, { shouldValidate: true });\n  };\n\n  const handleDatePickerChange = (value: LocalizedDate | null): void => {\n    setValue(TransferField.createdAt, value!.format(), { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Transfer): void => {\n    const mappedData: TransferDTO = {\n      ...data,\n      amount: Number(data.amount),\n      fromAccount: data.fromAccount.id,\n      toAccount: data.toAccount.id,\n      createdAt: date(data.createdAt).toDate()\n    };\n\n    isEditMode\n      ? dispatch(editTransfer([id, mappedData]))\n      : dispatch(createTransfer(mappedData));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isCreateMode\n      ? navigate(ROUTES.accounts.path)\n      : navigate(`${ROUTES.transfers.path}/view/${id}`);\n  };\n\n  const handleDeleteTransfer = (): void => {\n    dispatch(deleteTransfer(id));\n    setDeleteClicked(true);\n  };\n\n  const getTitle = (): string => {\n    return isEditMode ? t('TRANSFERS.EDIT_TRANSFER') : (isViewMode ? t('TRANSFERS.VIEW_TRANSFER') : t('TRANSFERS.NEW_TRANSFER'));\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.transfers.path}/edit/${id}`);\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (transfer) {\n      setValue(TransferField.fromAccount, transfer.fromAccount);\n      setValue(TransferField.toAccount, transfer.toAccount);\n      setValue(TransferField.amount, mapCurrencyStringToInputString(transfer.amount));\n      setValue(TransferField.createdAt, transfer.createdAt);\n    }\n  }, [transfer, setValue]);\n\n  const resetTransfer = React.useCallback(() => {\n    dispatch(resetGetTransferStatus());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    isCreateMode\n      ? navigate(ROUTES.accounts.path)\n      : navigate(ROUTES.transfers.path);\n\n    resetTransfer();\n  }, [navigate, isCreateMode, resetTransfer]);\n\n  React.useEffect(() => {\n    if (accountStatus === 'idle') {\n      dispatch(getAccounts());\n    }\n  }, [dispatch, accountStatus]);\n\n  React.useEffect(() => {\n    if (createEditStatus === 'succeeded' && formSubmitted) {\n      dispatch(getAccounts());\n      goBack();\n      setShowSnackbar(false);\n    }\n\n    if (createEditStatus === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [dispatch, goBack, createEditStatus, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (!id) {\n      dispatch(setGetTransferErrorStatus());\n    }\n  }, [id, dispatch]);\n\n  React.useEffect(() => {\n    if (id && getStatus === 'idle' && !isCreateMode && !deleteClicked) {\n      dispatch(getTransfer(id));\n    }\n  }, [id, isCreateMode, getStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetTransfer();\n    };\n  }, [resetTransfer]);\n\n  const renderContent = (): React.ReactElement => {\n    if (getStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!transfer || !id) && getStatus === 'failed') {\n      return <EmptyState text={t('TRANSFERS.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={7} columnSpacing={2}>\n          <Grid item sm={6} xs={12}>\n            <FormSelect\n              disabled={!isCreateMode}\n              label={t('ACCOUNTS.FROM_ACCOUNT')}\n              name={TransferField.fromAccount}\n              value={watchFromAccount.id || ''}\n              onChange={handleFromAccountChange}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.fromAccount.required!.message)\n                }\n              }}\n              renderValue={(value) => (\n                <Typography>{getAccountLabel(value, accounts, t)}</Typography>\n              )}\n            >\n              {accounts.map((account) => (\n                <MenuItem key={account.id} value={account.id} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <AccountOption data={account} />\n                </MenuItem>\n              ))}\n            </FormSelect>\n          </Grid>\n          <Grid item sm={6} xs={12}>\n            <FormSelect\n              disabled={!isCreateMode}\n              label={t('ACCOUNTS.TO_ACCOUNT')}\n              name={TransferField.toAccount}\n              value={watchToAccount.id || ''}\n              onChange={handleToAccountChange}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.toAccount.required!.message)\n                }\n              }}\n              renderValue={(value) => (\n                <Typography>{getAccountLabel(value, accounts, t)}</Typography>\n              )}\n            >\n              {accounts.map((account) => (\n                <MenuItem key={account.id} value={account.id} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <AccountOption data={account} />\n                </MenuItem>\n              ))}\n            </FormSelect>\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.AMOUNT')}\n              type='number'\n              name={TransferField.amount}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.amount.required!.message)\n                },\n                pattern: {\n                  value: regex,\n                  message: t(helper.amount.pattern!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormDatePicker\n              readOnly={isViewMode}\n              name={TransferField.createdAt}\n              label={t('COMMON.DATE')}\n              value={date(watchCreatedAt).isValid() ? date(watchCreatedAt) : null}\n              maxDate={date()}\n              rules={{\n                required: true,\n                validate: {\n                  maxDate: (value: string) =>\n                    Promise.resolve(date(value) <= date() || t(helper.createdAt.max!.message))\n                }\n              }}\n              onChange={handleDatePickerChange}\n              sx={{ width: '100%' }}\n            />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode  && !!transfer}\n        withDeleteButton={isEditMode  && !!transfer}\n        withCancelButton={!isViewMode  && !!transfer}\n        text={getTitle()}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4, marginBottom: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save transfer' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' open={showSnackbar} text={error?.messageKey ? t(error.messageKey) : error?.message || ''} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('TRANSFERS.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteTransfer}\n      >\n        <Typography variant='subtitle1'>\n          {t('TRANSFERS.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditTransfer;\n","import * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport date from 'core/date';\nimport { Transfer as TransferModel } from 'shared/models';\nimport { DATE_FORMAT } from 'shared/constants';\n\ninterface TransferProps {\n  data: TransferModel;\n  onClick?: (data: TransferModel) => void;\n}\n\nconst Transfer: React.FC<TransferProps> = ({ data, onClick }) => {\n  const { palette: { primary: { main, contrastText } } } = useTheme();\n  const { fromAccount, toAccount, createdAt, amount } = data;\n  const formattedCreatedAt = date(createdAt).format(DATE_FORMAT);\n\n  const onTransactionClick = (): void => {\n    if (onClick) {\n      onClick(data);\n    }\n  };\n\n  return (\n    <Paper elevation={1} sx={{ paddingX: 2, backgroundColor: main }} onClick={onTransactionClick}>\n      <Grid container columnSpacing={2} alignItems='center' sx={{ minHeight: 40, cursor: 'pointer' }}>\n        <Grid item xs={3}>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{fromAccount.name}</Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{toAccount.name}</Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{amount}</Typography>\n        </Grid>\n        <Grid item xs={3} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{formattedCreatedAt}</Typography>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Transfer;\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Box from '@mui/system/Box';\nimport Grid from '@mui/material/Grid';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getTransfers, selectTransfer } from 'store/reducers';\nimport { Transfer as TransferModel } from 'shared/models';\nimport { ROUTES } from 'shared/constants';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport EmptyState from 'shared/components/EmptyState';\nimport Transfer from '../components/Transfer';\n\nconst TransferList: React.FC<{}> = () => {\n  const dispatch = useAppDispatch();\n  const { transfers, status } = useAppSelector(selectTransfer);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  const getTransferData = (data: TransferModel): TransferModel => {\n    return {\n      ...data,\n      fromAccount: {\n        ...data.fromAccount,\n        name: data.fromAccount.nameKey ? t(data.fromAccount.nameKey) : data.fromAccount.name\n      }\n    };\n  };\n\n  const goBack = (): void => {\n    navigate(`${ROUTES.accounts.path}`);\n  };\n\n  const handleTransferItemClick = ({ id }: TransferModel): void => {\n    navigate(`${ROUTES.transfers.path}/view/${id}`, { state: { id } });\n  };\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getTransfers());\n    }\n  }, [dispatch, status]);\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='list' />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !transfers?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('TRANSFERS.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {\n          transfers.map((transfer) => (\n            <Grid item key={transfer.id} xs={12}>\n              <Transfer data={getTransferData(transfer)} onClick={handleTransferItemClick} />\n            </Grid>\n          ))\n        }\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle withBackButton text={t('TRANSFERS.PAGE_TITLE')} onBackButtonClick={goBack} />\n      <Grid container rowGap={2}>\n        {renderContent()}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TransferList;","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport CreateEditTransfer from './pages/CreateEditTransfer';\nimport TransferList from './pages/TransferList';\n\nconst Transfers: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<TransferList />} />\n      <Route path='/new' element={<CreateEditTransfer mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditTransfer mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditTransfer mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.transfers.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Transfers;\n","import * as React from 'react';\nimport Box, { BoxProps } from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\nimport { useTranslation } from 'core/i18n';\n\ntype EmptyStateProps = {\n  text: string;\n} & BoxProps\n\nconst EmptyState: React.FC<EmptyStateProps> = ({ text, ...props }) => {\n  const { palette: { info: { contrastText } } } = useTheme();\n  const { t } = useTranslation();\n  const textValue = text || t('COMMON.NO_DATA');\n\n  return (\n    <Box\n      display='flex'\n      justifyContent='center'\n      {...props}\n      sx={{\n        width: '100%',\n        ...props.sx\n      }}>\n      <Typography noWrap color={contrastText} fontSize={{ sm: 18, xs: 16 }}>{textValue}</Typography>\n    </Box>\n  );\n};\n\nexport default EmptyState;\n","import * as React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { DatePicker as MuiDatePicker, DatePickerProps as MuiDatePickerProps } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { LocalizedDate } from 'core/date';\nimport { FormControlRules } from 'shared/models';\n\ntype FormDatePickerProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & MuiDatePickerProps<LocalizedDate>;\n\nconst FormDatePicker: React.FC<FormDatePickerProps> = ({ name, label, rules = {}, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer sx={{ ...props.sx, paddingTop: 2, overflow: 'initial' }} components={['DatePicker']}>\n        <Controller\n          control={control}\n          name={name}\n          rules={rules}\n          render={({ field, fieldState: { error } }) => (\n            <Box position='relative' sx={{ width: '100%' }}>\n              <InputLabel>{label}</InputLabel>\n              <MuiDatePicker\n                {...field}\n                {...props} />\n              {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n            </Box>\n          )}\n        />\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n};\n\nexport default FormDatePicker;\n","import styled from '@emotion/styled';\nimport TextField from '@mui/material/TextField';\nimport { Theme } from '@mui/material/styles';\n\ninterface StyledTextFieldProps {\n  theme: Theme;\n}\n\nexport const StyledTextField = styled(TextField)<StyledTextFieldProps>`\n  &.MuiInputBase-input {\n    border-color: ${(props) => props.theme.palette.primary.main};\n    color: ${(props) => props.theme.palette.primary.main};\n  },\n  &.MuiOutlinedInput-root {\n    &.Mui-error {\n      & .MuiOutlinedInput-notchedOutline: {\n        border-color: ${(props) => props.theme.palette.error.main},\n      }\n    }\n    border-color: ${(props) => props.theme.palette.primary.main};\n    color: ${(props) => props.theme.palette.error.main};\n  }\n`;\n","import * as React from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport { FormControlRules } from 'shared/models';\nimport { StyledTextField } from './FormInput.styles';\n\ntype FormInputProps = {\n  name: string;\n  rules?: FormControlRules;\n} & TextFieldProps;\n\nconst FormInput: React.FC<FormInputProps> = ({ name, rules = {}, ...props }) => {\n  const theme = useTheme();\n\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      rules={rules}\n      render={({ field, fieldState: { error } }) => (\n        <Box position='relative'>\n          <StyledTextField\n            fullWidth\n            {...field}\n            {...props}\n            theme={theme}\n            error={!!errors[name]}\n          />\n          {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n        </Box>\n      )}\n    />\n  );\n};\n\nexport default FormInput;\n","import * as React from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport Select, { SelectProps } from '@mui/material/Select';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport { FormControlRules } from 'shared/models';\n\nexport interface SelectOption {\n  label: string;\n  value: string;\n}\n\ntype FormSelectProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & SelectProps<SelectOption['value']>;\n\nconst FormSelect: React.FC<FormSelectProps> = ({ name, label, rules = {}, children, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      rules={rules}\n      render={({ field, fieldState: { error } }) => (\n        <Box position='relative'>\n          <InputLabel>{label}</InputLabel>\n          <Select\n            fullWidth\n            variant='outlined'\n            error={!!errors[name]}\n            {...field}\n            {...props}>\n            {children}\n          </Select>\n          {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n        </Box>\n      )}\n    />\n  );\n};\n\nexport default FormSelect;\n","import * as React from 'react';\nimport MuiSkeleton, { SkeletonProps as MuiSkeletonProps } from '@mui/material/Skeleton';\nimport Grid from '@mui/material/Grid';\n\ntype SkeletonProps = {\n  type: 'list' | 'form' | 'summary' | 'circular'\n} & MuiSkeletonProps;\n\nconst Skeleton: React.FC<SkeletonProps> = ({ type, ...props }) => {\n  const isCircular = type === 'circular';\n  const isForm = type === 'form';\n\n  const getSize = () => {\n    switch (type) {\n    case 'list':\n      return { firstBar: 40, secondBar: 40, thirdBar: 40 };\n\n    case 'form':\n      return { firstBar: 56, secondBar: 56, thirdBar: 56 };\n\n    case 'summary':\n      return { firstBar: 30, secondBar: 60, thirdBar: 120 };\n\n    case 'circular':\n      return { firstBar: 64, secondBar: 64, thirdBar: 64 };\n\n    default:\n      return { firstBar: 40, secondBar: 40, thirdBar: 40 };\n    }\n  };\n\n  return isCircular\n    ? (\n      <Grid container columnGap={4} rowGap={4}>\n        <Grid item width={100} display='flex' justifyContent='center'>\n          <MuiSkeleton {...props} variant='circular' height={getSize().firstBar} width={getSize().firstBar} />\n        </Grid>\n        <Grid item width={100} display='flex' justifyContent='center'>\n          <MuiSkeleton {...props} variant='circular' height={getSize().secondBar} width={getSize().secondBar} />\n        </Grid>\n        <Grid item width={100} display='flex' justifyContent='center'>\n          <MuiSkeleton {...props} variant='circular' height={getSize().thirdBar} width={getSize().firstBar} />\n        </Grid>\n      </Grid>\n    )\n    : (\n      <Grid container justifyContent='center' rowGap={isForm ? 5 : 2}>\n        <Grid item xs={12}>\n          <MuiSkeleton {...props} variant='rounded' height={getSize().firstBar} />\n        </Grid>\n        <Grid item xs={12}>\n          <MuiSkeleton {...props} variant='rounded' animation='wave' height={getSize().secondBar} />\n        </Grid>\n        <Grid item xs={12}>\n          <MuiSkeleton {...props} variant='rounded' height={getSize().thirdBar} />\n        </Grid>\n      </Grid>\n    );\n};\n\nexport default Skeleton;\n","import * as React from 'react';\nimport MuiAlert, { AlertColor } from '@mui/material/Alert';\nimport MuiSnackbar, { SnackbarProps as MuiSnackbarProps } from '@mui/material/Snackbar';\n\ntype SnackbarProps = {\n  open: boolean;\n  text: string;\n  type: AlertColor;\n  onClose: () => void;\n} & MuiSnackbarProps;\n\nconst Snackbar: React.FC<SnackbarProps> = ({ open = false, text, type, onClose, ...props }) => {\n\n  const onSnackbarClose = (): void => {\n    onClose();\n  };\n\n  return (\n    <MuiSnackbar\n      open={open}\n      autoHideDuration={5000}\n      onClose={onSnackbarClose}\n      {...props}\n    >\n      <MuiAlert severity={type}>\n        {text}\n      </MuiAlert>\n    </MuiSnackbar>\n  );\n};\n\nexport default Snackbar;\n"],"names":["_ref","mode","regex","POSITIVE_NUMERIC_REGEX","navigate","useNavigate","dispatch","useAppDispatch","getStatus","createEditStatus","deleteStatus","useAppSelector","selectTransfer","error","selectTransferError","transfer","selectCurrentTransfer","accounts","selectAccount","accountStatus","selectAccountStatus","helper","transferHelper","t","useTranslation","formSubmitted","setFormSubmitted","React","showSnackbar","setShowSnackbar","deleteClicked","setDeleteClicked","dialogOpened","setDialogOpened","loading","deleteLoading","isCreateMode","ManageMode","create","isEditMode","edit","isViewMode","view","id","useParams","defaultValues","fromAccount","toAccount","amount","createdAt","date","format","undefined","methods","useForm","reValidateMode","handleSubmit","setValue","watch","reset","watchFromAccount","TransferField","watchToAccount","watchCreatedAt","handleFromAccountChange","event","find","_ref2","target","value","shouldValidate","handleToAccountChange","_ref3","handleDatePickerChange","handleFormSubmit","data","mappedData","Number","toDate","editTransfer","createTransfer","setFormValues","mapCurrencyStringToInputString","resetTransfer","resetGetTransferStatus","goBack","ROUTES","path","transfers","getAccounts","setGetTransferErrorStatus","getTransfer","_jsxs","Box","component","display","flexDirection","flexGrow","onSubmit","children","_jsx","PageTitle","withBackButton","withEditButton","withDeleteButton","withCancelButton","text","onBackButtonClick","onEditButtonClick","handleEditButtonClick","concat","onDeleteButtonClick","handleOpenDialog","onCancelButtonClick","handleCancelButtonClick","Skeleton","type","FormProvider","Grid","container","rowGap","columnSpacing","item","sm","xs","FormSelect","disabled","label","name","onChange","rules","required","message","renderValue","Typography","getAccountLabel","map","account","MenuItem","sx","justifyContent","AccountOption","FormInput","InputProps","readOnly","pattern","FormDatePicker","isValid","maxDate","validate","Promise","resolve","max","width","EmptyState","columnGap","marginTop","marginBottom","Button","fullWidth","variant","onClick","Snackbar","open","messageKey","onClose","handleSnackbarClose","Dialog","maxWidth","title","actionButtonText","handleCloseDialog","onAction","handleDeleteTransfer","deleteTransfer","palette","primary","main","contrastText","useTheme","formattedCreatedAt","DATE_FORMAT","Paper","elevation","paddingX","backgroundColor","onTransactionClick","alignItems","minHeight","cursor","noWrap","color","fontSize","TransferList","status","handleTransferItemClick","state","getTransfers","length","_Fragment","Transfer","nameKey","Transfers","Routes","Route","element","CreateEditTransfer","Navigate","to","replace","props","info","textValue","control","formState","errors","useFormContext","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","paddingTop","overflow","components","Controller","render","field","fieldState","position","InputLabel","MuiDatePicker","FormHelperText","StyledTextField","styled","TextField","_templateObject","_taggedTemplateLiteral","theme","Select","isForm","getSize","firstBar","secondBar","thirdBar","MuiSkeleton","height","animation","MuiSnackbar","autoHideDuration","onSnackbarClose","MuiAlert","severity"],"sourceRoot":""}