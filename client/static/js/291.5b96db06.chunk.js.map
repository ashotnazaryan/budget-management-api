{"version":3,"file":"static/js/291.5b96db06.chunk.js","mappings":"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","sources":["modules/Categories/pages/CategoryList.tsx","modules/Categories/pages/CreateEditCategory.tsx","modules/Categories/Categories.tsx","shared/components/ItemIcon.tsx","shared/components/Tabs.styles.ts","shared/components/Tabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Box from '@mui/system/Box';\nimport Grid from '@mui/material/Grid';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getCategories, selectCategory } from 'store/reducers';\nimport { Category, CategoryType, IconType, Option } from 'shared/models';\nimport { ROUTES, TABS } from 'shared/constants';\nimport Tabs from 'shared/components/Tabs';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport CategoryIcon from 'shared/components/CategoryIcon';\nimport EmptyState from 'shared/components/EmptyState';\n\nconst CategoryList: React.FC<{}> = () => {\n  const tabs = TABS;\n  const dispatch = useAppDispatch();\n  const { categories, status } = useAppSelector(selectCategory);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const [categoryType, setCategoryType] = React.useState<Option['value']>(String(CategoryType.expense));\n\n  const addIconData: Category = {\n    id: '',\n    name: 'New category',\n    nameKey: 'CATEGORIES.NEW_CATEGORY',\n    icon: IconType.plus,\n    type: Number(categoryType)\n  };\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getCategories());\n    }\n  }, [dispatch, status]);\n\n  const handleTabChange = (event: React.SyntheticEvent, value: Option['value']): void => {\n    setCategoryType(value);\n  };\n\n  const handleCategoryIconClick = ({ id, name }: Category): void => {\n    navigate(`${ROUTES.categories.path}/view/${name}`, { state: { id } });\n  };\n\n  const openNewCategoryPage = (): void => {\n    navigate(`${ROUTES.categories.path}/new`, { state: { categoryType } });\n  };\n\n  const getCategoryData = (data: Category): Category => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name\n    };\n  };\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='circular' />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !categories?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('CATEGORIES.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {categories\n          .filter(({ type }) => String(type) === categoryType)\n          .map((category) => (\n            <Grid item key={category.id}>\n              <CategoryIcon data={getCategoryData(category)} onItemClick={handleCategoryIconClick} />\n            </Grid>\n          ))}\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle text={t('CATEGORIES.PAGE_TITLE')} />\n      <Tabs centered defaultValue={categoryType} tabs={tabs} onChange={handleTabChange} sx={{ marginBottom: 3 }} />\n      <Grid container columnGap={4} rowGap={4} sx={{ marginTop: 4 }}>\n        {renderContent()}\n        <Grid item>\n          <CategoryIcon data={getCategoryData(addIconData)} onItemClick={openNewCategoryPage} />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CategoryList;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  createCategory,\n  editCategory,\n  getCategory,\n  selectCategory,\n  selectCurrentCategory,\n  resetGetCategoryStatus,\n  selectCategoryError,\n  deleteCategory,\n  setGetCategoryErrorStatus\n} from 'store/reducers';\nimport { CATEGORY_ICONS_LIST, TABS, ROUTES } from 'shared/constants';\nimport { Category, CategoryDTO, CategoryField, CategoryType, IconType, ManageMode } from 'shared/models';\nimport { categoryHelper, getPageTitle, mapCategoryTypesWithTranslations } from 'shared/helpers';\nimport PageTitle from 'shared/components/PageTitle';\nimport Button from 'shared/components/Button';\nimport FormInput from 'shared/components/FormInput';\nimport Snackbar from 'shared/components/Snackbar';\nimport ItemIcon from 'shared/components/ItemIcon';\nimport FormRadioGroup from 'shared/components/FormRadioGroup';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport FormIcon from 'shared/components/FormIcon';\n\ninterface NewCategoryProps {\n  mode: ManageMode;\n}\n\nconst CreateEditCategory: React.FC<NewCategoryProps> = ({ mode }) => {\n  const tabs = TABS;\n  const icons = CATEGORY_ICONS_LIST;\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const dispatch = useAppDispatch();\n  const { getStatus, createEditStatus, deleteStatus } = useAppSelector(selectCategory);\n  const error = useAppSelector(selectCategoryError);\n  const category = useAppSelector(selectCurrentCategory);\n  const { palette: { info: { contrastText } } } = useTheme();\n  const helper = categoryHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = createEditStatus === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const categoryId = state?.id as CategoryDTO['id'];\n  const categoryName = category?.nameKey ? t(category.nameKey) : (category?.name || '');\n  const categoryType = state?.categoryType as CategoryType;\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n  const title = getPageTitle<Category>(mode, t, getStatus, 'CATEGORIES', 'NEW_CATEGORY', 'EMPTY_TITLE', category);\n\n  const defaultValues: Partial<Category> = {\n    type: String(categoryType) as unknown as number,\n    name: '',\n  };\n\n  const methods = useForm<Category>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { setValue, handleSubmit, watch, reset } = methods;\n  const watchType = Number(watch(CategoryField.type));\n\n  const handleAccountIconClick = ({ id }: { id: string }): void => {\n    if (isViewMode) {\n      return;\n    }\n\n    setValue(CategoryField.icon, id as IconType, { shouldValidate: true });\n  };\n\n  const handleCategoryTypeChange = (value: string): void => {\n    const type = Number(value) as CategoryType;\n\n    setValue(CategoryField.type, type, { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Category): void => {\n    isEditMode ? dispatch(editCategory([categoryId, data])) : dispatch(createCategory(data));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isEditMode\n      ? navigate(`${ROUTES.categories.path}/view/${categoryName}`, { state: { id: categoryId } })\n      : navigate(ROUTES.categories.path);\n  };\n\n  const handleDeleteCategory = (): void => {\n    dispatch(deleteCategory(categoryId));\n    setDeleteClicked(true);\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.categories.path}/edit/${categoryName}`, { state: { id: categoryId } });\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (category) {\n      setValue(CategoryField.type, String(category.type) as unknown as number);\n      setValue(CategoryField.name, category.nameKey ? t(category.nameKey) : category.name);\n      setValue(CategoryField.icon, category.icon);\n    }\n  }, [category, setValue, t]);\n\n  const resetCategory = React.useCallback(() => {\n    dispatch(resetGetCategoryStatus());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    navigate(`${ROUTES.categories.path}`);\n    resetCategory();\n  }, [navigate, resetCategory]);\n\n  React.useEffect(() => {\n    if (createEditStatus === 'succeeded' && formSubmitted) {\n      goBack();\n      setShowSnackbar(false);\n    }\n\n    if (createEditStatus === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [goBack, createEditStatus, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (!categoryId) {\n      dispatch(setGetCategoryErrorStatus());\n    }\n  }, [categoryId, dispatch]);\n\n  React.useEffect(() => {\n    if (categoryId && getStatus === 'idle' && (isEditMode || isViewMode) && !deleteClicked) {\n      dispatch(getCategory(categoryId));\n    }\n  }, [categoryId, isEditMode, isViewMode, getStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetCategory();\n    };\n  }, [resetCategory]);\n\n  const renderContent = (): React.ReactElement => {\n    if (getStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!category || !categoryId) && getStatus === 'failed') {\n      return <EmptyState text={t('CATEGORIES.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={5}>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.NAME')}\n              name={CategoryField.name}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.name.required!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color={contrastText} sx={{ marginY: 1 }}>{t('COMMON.TYPE')}</Typography>\n            <FormRadioGroup\n              readonly={isViewMode}\n              name={CategoryField.type}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.type.required!.message)\n                }\n              }}\n              options={mapCategoryTypesWithTranslations(tabs, t)}\n              labelColor={contrastText}\n              value={watchType}\n              onRadioChange={handleCategoryTypeChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormIcon\n              name={CategoryField.icon}\n              label={t('COMMON.ICON')}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.icon.required!.message)\n                }\n              }}\n              render={({ field }) => (\n                <Grid container {...field} columnGap={1} rowGap={3} sx={{ marginTop: 2 }}>\n                  {\n                    icons.map(({ name }) => (\n                      <Grid item key={name}>\n                        <ItemIcon selected={field.value} id={name} icon={name} size={50} readonly={isViewMode} onClick={handleAccountIconClick} />\n                      </Grid>\n                    ))\n                  }\n                </Grid>\n              )} />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode && !!category}\n        withDeleteButton={isEditMode && !!category}\n        withCancelButton={!isViewMode && !!category}\n        text={title}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4, marginBottom: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save category' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' text={error?.messageKey ? t(error.messageKey) : error?.message || ''} open={showSnackbar} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('CATEGORIES.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteCategory}\n      >\n        <Typography variant='subtitle1'>\n          {t('CATEGORIES.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditCategory;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport CategoryList from './pages/CategoryList';\nimport CreateEditCategory from './pages/CreateEditCategory';\n\nconst Categories: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<CategoryList />} />\n      <Route path='/new' element={<CreateEditCategory mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditCategory mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditCategory mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.categories.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Categories;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport { IconType } from 'shared/models';\nimport Icon from 'shared/components/Icon';\n\ninterface ItemIconProps {\n  id: string;\n  icon: IconType;\n  selected?: string;\n  size?: number;\n  disabled?: boolean;\n  readonly?: boolean;\n  onClick?: ({ id }: { id: string }) => void;\n}\n\nconst ItemIcon: React.FC<ItemIconProps> = ({ id, selected, icon, size = 64, disabled, readonly, onClick }) => {\n  const { palette: { primary: { main, contrastText }, action } } = useTheme();\n\n  const onItemClick = (id: string) => (): void => {\n    if (readonly) {\n      return;\n    }\n\n    if (onClick) {\n      onClick({ id });\n    }\n  };\n\n  const getColor = (): string => {\n    return selected === id ? contrastText : main;\n  };\n\n  const getBorder = (): string => {\n    return disabled ? 'none' : `1px solid ${main}`;\n  };\n\n  const getBackgroundColor = (): string => {\n    if (disabled) {\n      return action.disabled;\n    }\n\n    return selected === id ? main : 'transparent';\n  };\n\n  return (\n    <Box display='flex' flexDirection='column' alignItems='center' width={size + 20}>\n      <Box\n        onClick={onItemClick(id)}\n        sx={{\n          backgroundColor: getBackgroundColor(),\n          border: getBorder(),\n          color: getColor(),\n          height: size,\n          width: size,\n          borderRadius: '50%',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: (disabled || readonly) ? 'default' : 'pointer'\n        }}>\n        <Icon name={icon}></Icon>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ItemIcon;\n","import styled from '@emotion/styled';\nimport Tabs from '@mui/material/Tabs';\n\nexport const StyledTabs = styled(Tabs)({\n  '&.MuiTabs-root': {\n  }\n});\n","import * as React from 'react';\nimport { TabsProps as MuiTabsProps } from '@mui/material/Tabs';\nimport MuiTab from '@mui/material/Tab';\nimport { useTranslation } from 'core/i18n';\nimport { Option } from 'shared/models';\nimport { StyledTabs } from './Tabs.styles';\n\ntype TabsProps = {\n  tabs: Option[];\n  defaultValue?: Option['value'];\n  onChange: (event: React.SyntheticEvent, value: Option['value']) => void;\n} & MuiTabsProps;\n\nconst Tabs: React.FC<TabsProps> = ({ tabs, defaultValue = '0', onChange, ...props }) => {\n  const { t } = useTranslation();\n  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);\n\n  const onValueChange = (event: React.SyntheticEvent, selectedValue: Option['value']): void => {\n    setSelectedValue(selectedValue);\n    onChange(event, selectedValue);\n  };\n\n  return (\n    <StyledTabs {...props} value={selectedValue} onChange={onValueChange}>\n      {\n        tabs.map(({ value, label }) => (\n          <MuiTab value={value} key={value} label={t(label)} sx={{ fontSize: { sm: 14, xs: 12 } }} />\n        ))\n      }\n    </StyledTabs>\n  );\n};\n\nexport default Tabs;\n"],"names":["CategoryList","tabs","TABS","dispatch","useAppDispatch","categories","status","useAppSelector","selectCategory","navigate","useNavigate","t","useTranslation","categoryType","setCategoryType","React","String","CategoryType","expense","addIconData","id","name","nameKey","icon","IconType","plus","type","Number","getCategories","handleCategoryIconClick","_ref","concat","ROUTES","path","state","getCategoryData","data","_jsxs","Box","flexGrow","children","_jsx","PageTitle","text","Tabs","centered","defaultValue","onChange","handleTabChange","event","value","sx","marginBottom","Grid","container","columnGap","rowGap","marginTop","item","xs","Skeleton","length","_Fragment","filter","_ref2","map","category","CategoryIcon","onItemClick","EmptyState","openNewCategoryPage","mode","icons","CATEGORY_ICONS_LIST","useLocation","getStatus","createEditStatus","deleteStatus","error","selectCategoryError","selectCurrentCategory","palette","info","contrastText","useTheme","helper","categoryHelper","formSubmitted","setFormSubmitted","deleteClicked","setDeleteClicked","showSnackbar","setShowSnackbar","dialogOpened","setDialogOpened","loading","deleteLoading","categoryId","categoryName","isCreateMode","ManageMode","create","isEditMode","edit","isViewMode","view","title","getPageTitle","defaultValues","methods","useForm","reValidateMode","setValue","handleSubmit","watch","reset","watchType","CategoryField","handleAccountIconClick","shouldValidate","handleCategoryTypeChange","handleFormSubmit","editCategory","createCategory","setFormValues","resetCategory","resetGetCategoryStatus","goBack","setGetCategoryErrorStatus","getCategory","component","display","flexDirection","onSubmit","withBackButton","withEditButton","withDeleteButton","withCancelButton","onBackButtonClick","onEditButtonClick","handleEditButtonClick","onDeleteButtonClick","handleOpenDialog","onCancelButtonClick","handleCancelButtonClick","FormProvider","FormInput","InputProps","readOnly","label","rules","required","message","Typography","color","marginY","FormRadioGroup","readonly","options","mapCategoryTypesWithTranslations","labelColor","onRadioChange","FormIcon","render","_ref3","field","_ref4","ItemIcon","selected","size","onClick","justifyContent","sm","Button","fullWidth","variant","Snackbar","messageKey","open","onClose","handleSnackbarClose","Dialog","maxWidth","actionButtonText","handleCloseDialog","onAction","handleDeleteCategory","deleteCategory","Categories","Routes","Route","element","CreateEditCategory","Navigate","to","replace","disabled","primary","main","action","alignItems","width","backgroundColor","border","height","borderRadius","cursor","Icon","StyledTabs","styled","props","selectedValue","setSelectedValue","onValueChange","MuiTab","fontSize"],"sourceRoot":""}