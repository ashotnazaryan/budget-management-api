{"version":3,"file":"static/js/305.71e7efb6.chunk.js","mappings":"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","sources":["modules/Transactions/components/Transaction.tsx","modules/Transactions/pages/TransactionList.tsx","modules/Transactions/pages/CreateEditTransaction.tsx","modules/Transactions/Transactions.tsx","shared/components/FormDatePicker.tsx","shared/components/FormSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport date from 'core/date';\nimport { CategoryType, Transaction as TransactionModel } from 'shared/models';\nimport Icon from 'shared/components/Icon';\nimport { DATE_FORMAT } from 'shared/constants';\n\ninterface TransactionProps {\n  data: TransactionModel;\n  onClick?: (data: TransactionModel) => void;\n}\n\nconst Transaction: React.FC<TransactionProps> = ({ data, onClick }) => {\n  const { palette: { primary: { main, contrastText }, error } } = useTheme();\n  const { name, icon, accountName, accountIcon, createdAt, amount, type } = data;\n  const formattedCreatedAt = date(createdAt).format(DATE_FORMAT);\n\n  const onTransactionClick = (): void => {\n    if (onClick) {\n      onClick(data);\n    }\n  };\n\n  return (\n    <Paper elevation={1} sx={{ paddingX: 2, backgroundColor: main }} onClick={onTransactionClick}>\n      <Grid container columnSpacing={2} alignItems='center' sx={{ minHeight: 40, cursor: 'pointer' }}>\n        <Grid item xs={1} display='flex'>\n          {icon && <Icon name={icon} sx={{ color: contrastText, fontSize: { sm: 22, xs: 18 } }}></Icon>}\n        </Grid>\n        <Grid item xs={3}>\n          <Typography noWrap color={contrastText}>{name}</Typography>\n        </Grid>\n        <Grid item xs={2} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={type === CategoryType.expense ? error.main : contrastText}>{amount}</Typography>\n        </Grid>\n        <Grid item xs={2} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText}>{accountName}</Typography>\n        </Grid>\n        <Grid item xs={1} display='flex'>\n          {accountIcon && <Icon name={accountIcon} color='primary' sx={{ fontSize: { sm: 22, xs: 18 }, color: contrastText }}></Icon>}\n        </Grid>\n        <Grid item xs={3} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText}>{formattedCreatedAt}</Typography>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Transaction;\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/system/Box';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getTransactions, selectTransaction } from 'store/reducers';\nimport { Transaction as TransactionModel } from 'shared/models';\nimport { ROUTES } from 'shared/constants';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport EmptyState from 'shared/components/EmptyState';\nimport Transaction from '../components/Transaction';\n\nconst TransactionList: React.FC<{}> = () => {\n  const dispatch = useAppDispatch();\n  const { transactions, status } = useAppSelector(selectTransaction);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getTransactions());\n    }\n  }, [dispatch, status]);\n\n  const handleTransactionClick = ({ id, name }: TransactionModel): void => {\n    navigate(`${ROUTES.transactions.path}/view/${name}`, { state: { id } });\n  };\n\n  const getTransactionData = (data: TransactionModel): TransactionModel => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name,\n      accountName: data.accountNameKey ? t(data.accountNameKey) : data.accountName\n    };\n  };\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='list' />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !transactions?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('TRANSACTIONS.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {\n          transactions.map((transaction) => (\n            <Grid item key={transaction.id} xs={12}>\n              <Transaction data={getTransactionData(transaction)} onClick={handleTransactionClick} />\n            </Grid>\n          ))\n        }\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle text={t('TRANSACTIONS.PAGE_TITLE')} />\n      <Grid container rowGap={2}>\n        {renderContent()}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TransactionList;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Controller, FormProvider, useForm } from 'react-hook-form';\nimport date, { LocalizedDate } from 'core/date';\nimport { useTranslation } from 'core/i18n';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useTheme } from '@mui/material/styles';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  getCategories,\n  selectCategory,\n  addTransaction,\n  selectTransaction,\n  selectAccount,\n  getAccounts,\n  selectSettings,\n  selectCurrentTransaction,\n  getTransaction,\n  resetCurrentTransaction,\n  editTransaction,\n  selectCategoryStatus,\n  selectAccountStatus,\n  deleteTransaction,\n  selectTransactionError\n} from 'store/reducers';\nimport { CategoryType, Category as CategoryModel, TransactionField, TransactionDTO, Account, ManageMode, Transaction, IconType } from 'shared/models';\nimport { TABS, POSITIVE_NUMERIC_REGEX, ROUTES } from 'shared/constants';\nimport { getAccountLabel, mapCategoryTypesWithTranslations, mapCurrencyStringToInputString, transactionHelper } from 'shared/helpers';\nimport FormInput from 'shared/components/FormInput';\nimport Button from 'shared/components/Button';\nimport Snackbar from 'shared/components/Snackbar';\nimport PageTitle from 'shared/components/PageTitle';\nimport CategoryIcon from 'shared/components/CategoryIcon';\nimport FormDatePicker from 'shared/components/FormDatePicker';\nimport FormSelect from 'shared/components/FormSelect';\nimport FormRadioGroup from 'shared/components/FormRadioGroup';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport AccountOption from 'shared/components/AccountOption';\n\ninterface CreateEditTransactionProps {\n  mode: ManageMode;\n}\n\nconst CreateEditTransaction: React.FC<CreateEditTransactionProps> = ({ mode }) => {\n  const regex = POSITIVE_NUMERIC_REGEX;\n  const tabs = TABS;\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const { categories } = useAppSelector(selectCategory);\n  const categoryStatus = useAppSelector(selectCategoryStatus);\n  const { status, currentStatus, deleteStatus } = useAppSelector(selectTransaction);\n  const error = useAppSelector(selectTransactionError);\n  const { accounts } = useAppSelector(selectAccount);\n  const accountStatus = useAppSelector(selectAccountStatus);\n  const { defaultAccount = '' } = useAppSelector(selectSettings);\n  const transaction = useAppSelector(selectCurrentTransaction);\n  const { palette: { info: { contrastText } } } = useTheme();\n  const helper = transactionHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = status === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const transactionId = state?.id as TransactionDTO['id'];\n  const transactionName = transaction?.nameKey ? t(transaction.nameKey) : (transaction?.name || '');\n  const categoryType = state?.categoryType as CategoryType || CategoryType.expense;\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n\n  const defaultValues: Partial<Transaction> = {\n    amount: '',\n    categoryId: '',\n    accountId: defaultAccount || '',\n    type: String(categoryType) as unknown as number,\n    createdAt: isCreateMode ? date().format() : undefined,\n    note: ''\n  };\n\n  const methods = useForm<Transaction>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { setValue, handleSubmit, control, watch, reset } = methods;\n  const watchType = watch(TransactionField.type);\n  const watchAccount = watch(TransactionField.accountId);\n  const watchCreatedAt = watch(TransactionField.createdAt);\n\n  const getCategoryData = (data: CategoryModel): CategoryModel => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name\n    };\n  };\n\n  const handleCategoryTypeChange = (value: string): void => {\n    const type = Number(value) as CategoryType;\n\n    setValue(TransactionField.type, type, { shouldValidate: true });\n    setValue(TransactionField.categoryId, defaultValues.categoryId as string);\n    setValue(TransactionField.icon, defaultValues.icon as IconType);\n    setValue(TransactionField.name, defaultValues.name as string);\n  };\n\n  const handleCategoryIconClick = ({ id, name, nameKey, icon }: CategoryModel): void => {\n    if (isViewMode) {\n      return;\n    }\n\n    setValue(TransactionField.categoryId, id, { shouldValidate: true });\n    setValue(TransactionField.icon, icon);\n    setValue(TransactionField.name, name, { shouldValidate: true });\n    setValue('nameKey', nameKey);\n  };\n\n  const handleAccountChange = (event: SelectChangeEvent<Account['id']>): void => {\n    setValue(TransactionField.accountId, event.target.value, { shouldValidate: true });\n  };\n\n  const handleDatePickerChange = (value: LocalizedDate | null): void => {\n    setValue(TransactionField.createdAt, value!.format(), { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Transaction): void => {\n    const mappedData: Omit<TransactionDTO, 'percentValue'> = {\n      ...data,\n      amount: Number(data.amount),\n      type: Number(data.type),\n      createdAt: date(data.createdAt).toDate()\n    };\n\n    isEditMode\n      ? dispatch(editTransaction([transactionId, mappedData]))\n      : dispatch(addTransaction(mappedData));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isCreateMode\n      ? navigate(ROUTES.dashboard.path)\n      : navigate(`${ROUTES.transactions.path}/view/${transactionName}`, { state: { id: transactionId } });\n  };\n\n  const handleDeleteTransaction = (): void => {\n    dispatch(deleteTransaction(transactionId));\n    setDeleteClicked(true);\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.transactions.path}/edit/${transactionName}`, { state: { id: transactionId } });\n  };\n\n  const getTitle = (): string => {\n    if (isCreateMode) {\n      return t('TRANSACTIONS.NEW_TRANSACTION');\n    } else if (transaction && (isEditMode || isViewMode)) {\n      return transactionName;\n    } else if (currentStatus !== 'loading') {\n      return t('TRANSACTIONS.EMPTY_TITLE');\n    }\n\n    return '';\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (transaction) {\n      setValue(TransactionField.categoryId, transaction.categoryId);\n      setValue(TransactionField.accountId, transaction.accountId);\n      setValue(TransactionField.icon, transaction.icon);\n      setValue(TransactionField.amount, mapCurrencyStringToInputString(transaction.amount));\n      setValue(TransactionField.type, String(transaction.type) as unknown as number);\n      setValue(TransactionField.createdAt, transaction.createdAt);\n      setValue(TransactionField.note, transaction.note);\n      setValue('name', transaction.name);\n    }\n  }, [transaction, setValue]);\n\n  const resetTransaction = React.useCallback(() => {\n    dispatch(resetCurrentTransaction());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    navigate(`${isCreateMode ? ROUTES.dashboard.path : ROUTES.transactions.path}`);\n    resetTransaction();\n  }, [navigate, resetTransaction, isCreateMode]);\n\n  React.useEffect(() => {\n    if (categoryStatus === 'idle') {\n      dispatch(getCategories());\n    }\n\n    if (accountStatus === 'idle') {\n      dispatch(getAccounts());\n    }\n  }, [dispatch, categoryStatus, accountStatus]);\n\n  React.useEffect(() => {\n    if (status === 'succeeded' && formSubmitted) {\n      goBack();\n      setShowSnackbar(false);\n      dispatch(getAccounts());\n    }\n\n    if (status === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [dispatch, goBack, status, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (transactionId && currentStatus === 'idle' && !isCreateMode && !deleteClicked) {\n      dispatch(getTransaction(transactionId));\n    }\n  }, [transactionId, isCreateMode, currentStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setValue(TransactionField.accountId, defaultAccount);\n  }, [setValue, defaultAccount]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetTransaction();\n    };\n  }, [resetTransaction]);\n\n  const renderContent = (): React.ReactElement => {\n    if (currentStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!transaction || !transactionId)) {\n      return <EmptyState text={t('TRANSACTIONS.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={7}>\n          <Grid item xs={12}>\n            <Typography color={contrastText}>{t('COMMON.TYPE')}</Typography>\n            <FormRadioGroup\n              readonly={isViewMode}\n              name={TransactionField.type}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.type.required!.message)\n                }\n              }}\n              options={mapCategoryTypesWithTranslations(tabs, t)}\n              labelColor={contrastText}\n              value={watchType}\n              onRadioChange={handleCategoryTypeChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.AMOUNT')}\n              type='number'\n              name={TransactionField.amount}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.amount.required!.message)\n                },\n                pattern: {\n                  value: regex,\n                  message: t(helper.amount.pattern!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormSelect\n              inputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.ACCOUNT')}\n              name={TransactionField.accountId}\n              value={accounts.length ? (watchAccount || defaultAccount) : ''}\n              onChange={handleAccountChange}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.accountId.required!.message)\n                }\n              }}\n              renderValue={(value) => (\n                <Typography>{getAccountLabel(value, accounts, t)}</Typography>\n              )}\n            >\n              {accounts.map((account) => (\n                <MenuItem key={account.id} value={account.id} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <AccountOption data={account} />\n                </MenuItem>\n              ))}\n            </FormSelect>\n          </Grid>\n          <Grid item xs={12}>\n            <FormDatePicker\n              readOnly={isViewMode}\n              name={TransactionField.createdAt}\n              label={t('COMMON.DATE')}\n              value={date(watchCreatedAt).isValid() ? date(watchCreatedAt) : null}\n              maxDate={date()}\n              rules={{\n                required: true,\n                validate: {\n                  maxDate: (value: string) =>\n                    Promise.resolve(date(value) <= date() || t(helper.createdAt.max!.message))\n                }\n              }}\n              onChange={handleDatePickerChange}\n              sx={{ width: '100%' }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              inputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.NOTE')}\n              name={TransactionField.note}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color={contrastText} sx={{ marginY: 1 }}>{t('COMMON.CATEGORY')}</Typography>\n            <Controller\n              control={control}\n              name={TransactionField.categoryId}\n              rules={{\n                required: true\n              }}\n              render={({ field, fieldState: { error } }) => (\n                <>\n                  <Grid container {...field} columnGap={4} rowGap={4}>\n                    {\n                      categories.filter(({ type }) => type === Number(watchType)).map((category) => (\n                        <Grid item key={category.id}>\n                          <CategoryIcon data={getCategoryData(category)} selected={field.value} readonly={isViewMode} onItemClick={handleCategoryIconClick} />\n                        </Grid>\n                      ))\n                    }\n                  </Grid>\n                  {error && <FormHelperText error>{t(helper.categoryId[error.type]!.message)}</FormHelperText>}\n                </>\n              )}\n            />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode && !!transaction}\n        withDeleteButton={isEditMode && !!transaction}\n        withCancelButton={!isViewMode && !!transaction}\n        text={getTitle()}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save transaction' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' open={showSnackbar} text={error?.messageKey ? t(error.messageKey) : error?.message || ''} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('TRANSACTIONS.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteTransaction}\n      >\n        <Typography variant='subtitle1'>\n          {t('TRANSACTIONS.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditTransaction;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport TransactionList from './pages/TransactionList';\nimport CreateEditTransaction from './pages/CreateEditTransaction';\n\nconst Transactions: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<TransactionList />} />\n      <Route path='/new' element={<CreateEditTransaction mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditTransaction mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditTransaction mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.accounts.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Transactions;\n","import * as React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { DatePicker as MuiDatePicker, DatePickerProps as MuiDatePickerProps } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { LocalizedDate } from 'core/date';\nimport { FormControlRules } from 'shared/models';\n\ntype FormDatePickerProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & MuiDatePickerProps<LocalizedDate>;\n\nconst FormDatePicker: React.FC<FormDatePickerProps> = ({ name, label, rules = {}, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer sx={{ paddingTop: 2, overflow: 'initial' }} components={['DatePicker']}>\n        <Controller\n          control={control}\n          name={name}\n          rules={rules}\n          render={({ field, fieldState: { error } }) => (\n            <Box position='relative'>\n              <InputLabel>{label}</InputLabel>\n              <MuiDatePicker\n                {...field}\n                {...props} />\n              {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n            </Box>\n          )}\n        />\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n};\n\nexport default FormDatePicker;\n","import * as React from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport Select, { SelectProps } from '@mui/material/Select';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport { FormControlRules } from 'shared/models';\n\nexport interface SelectOption {\n  label: string;\n  value: string;\n}\n\ntype FormSelectProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & SelectProps<SelectOption['value']>;\n\nconst FormSelect: React.FC<FormSelectProps> = ({ name, label, rules = {}, children, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      rules={rules}\n      render={({ field, fieldState: { error } }) => (\n        <Box position='relative'>\n          <InputLabel>{label}</InputLabel>\n          <Select\n            fullWidth\n            variant='outlined'\n            error={!!errors[name]}\n            {...field}\n            {...props}>\n            {children}\n          </Select>\n          {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n        </Box>\n      )}\n    />\n  );\n};\n\nexport default FormSelect;\n"],"names":["_ref","data","onClick","_useTheme$palette","useTheme","palette","_useTheme$palette$pri","primary","main","contrastText","error","name","icon","accountName","accountIcon","createdAt","amount","type","formattedCreatedAt","date","format","DATE_FORMAT","_jsx","Paper","elevation","sx","paddingX","backgroundColor","children","_jsxs","Grid","container","columnSpacing","alignItems","minHeight","cursor","item","xs","display","Icon","color","fontSize","sm","Typography","noWrap","justifyContent","CategoryType","dispatch","useAppDispatch","_useAppSelector","useAppSelector","selectTransaction","transactions","status","navigate","useNavigate","t","useTranslation","React","getTransactions","handleTransactionClick","id","concat","ROUTES","state","Box","flexGrow","PageTitle","text","rowGap","Skeleton","length","_Fragment","map","transaction","Transaction","_objectSpread","nameKey","accountNameKey","EmptyState","mode","regex","POSITIVE_NUMERIC_REGEX","tabs","TABS","useLocation","categories","selectCategory","categoryStatus","selectCategoryStatus","_useAppSelector2","currentStatus","deleteStatus","selectTransactionError","accounts","selectAccount","accountStatus","selectAccountStatus","_useAppSelector4$defa","selectSettings","defaultAccount","selectCurrentTransaction","info","helper","transactionHelper","_React$useState","_React$useState2","_slicedToArray","formSubmitted","setFormSubmitted","_React$useState3","_React$useState4","deleteClicked","setDeleteClicked","_React$useState5","_React$useState6","showSnackbar","setShowSnackbar","_React$useState7","_React$useState8","dialogOpened","setDialogOpened","loading","deleteLoading","transactionId","transactionName","categoryType","isCreateMode","ManageMode","isEditMode","isViewMode","defaultValues","categoryId","accountId","String","undefined","note","methods","useForm","reValidateMode","setValue","handleSubmit","control","watch","reset","watchType","TransactionField","watchAccount","watchCreatedAt","handleCategoryTypeChange","value","Number","shouldValidate","handleCategoryIconClick","_ref2","handleAccountChange","event","target","handleDatePickerChange","handleFormSubmit","mappedData","toDate","editTransaction","addTransaction","setFormValues","mapCurrencyStringToInputString","resetTransaction","resetCurrentTransaction","goBack","getCategories","getAccounts","getTransaction","component","flexDirection","onSubmit","withBackButton","withEditButton","withDeleteButton","withCancelButton","onBackButtonClick","onEditButtonClick","onDeleteButtonClick","onCancelButtonClick","FormProvider","FormRadioGroup","readonly","rules","required","message","options","mapCategoryTypesWithTranslations","labelColor","onRadioChange","FormInput","InputProps","readOnly","label","pattern","FormSelect","inputProps","onChange","renderValue","getAccountLabel","account","MenuItem","AccountOption","FormDatePicker","isValid","maxDate","validate","Promise","resolve","max","width","marginY","Controller","render","_ref3","field","fieldState","columnGap","filter","_ref4","category","CategoryIcon","selected","onItemClick","FormHelperText","marginTop","Button","fullWidth","variant","Snackbar","open","messageKey","onClose","Dialog","maxWidth","title","actionButtonText","onAction","deleteTransaction","Routes","Route","path","element","TransactionList","CreateEditTransaction","Navigate","to","replace","_ref$rules","props","_objectWithoutProperties","_excluded","_useFormContext","useFormContext","errors","formState","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","paddingTop","overflow","components","position","InputLabel","MuiDatePicker","Select"],"sourceRoot":""}