{"version":3,"file":"static/js/305.b56435ea.chunk.js","mappings":"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","sources":["modules/Transactions/components/Transaction.tsx","modules/Transactions/pages/TransactionList.tsx","modules/Transactions/pages/CreateEditTransaction.tsx","modules/Transactions/Transactions.tsx","shared/components/FormDatePicker.tsx","shared/components/FormSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport date from 'core/date';\nimport { CategoryType, Transaction as TransactionModel } from 'shared/models';\nimport Icon from 'shared/components/Icon';\nimport { DATE_FORMAT } from 'shared/constants';\n\ninterface TransactionProps {\n  data: TransactionModel;\n  onClick?: (data: TransactionModel) => void;\n}\n\nconst Transaction: React.FC<TransactionProps> = ({ data, onClick }) => {\n  const { palette: { primary: { main, contrastText }, error } } = useTheme();\n  const { name, icon, accountName, accountIcon, createdAt, amount, type } = data;\n  const formattedCreatedAt = date(createdAt).format(DATE_FORMAT);\n\n  const onTransactionClick = (): void => {\n    if (onClick) {\n      onClick(data);\n    }\n  };\n\n  return (\n    <Paper elevation={1} sx={{ paddingX: 2, backgroundColor: main }} onClick={onTransactionClick}>\n      <Grid container columnSpacing={2} alignItems='center' sx={{ minHeight: 40, cursor: 'pointer' }}>\n        <Grid item xs={1} display='flex'>\n          {icon && <Icon name={icon} sx={{ color: contrastText, fontSize: { sm: 22, xs: 18 } }}></Icon>}\n        </Grid>\n        <Grid item xs={2.5}>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{name}</Typography>\n        </Grid>\n        <Grid item xs={2.5} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={type === CategoryType.expense ? error.main : contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{amount}</Typography>\n        </Grid>\n        <Grid item xs={2} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{accountName}</Typography>\n        </Grid>\n        <Grid item xs={1} display='flex'>\n          {accountIcon && <Icon name={accountIcon} color='primary' sx={{ fontSize: { sm: 22, xs: 18 }, color: contrastText }}></Icon>}\n        </Grid>\n        <Grid item xs={3} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{formattedCreatedAt}</Typography>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Transaction;\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/system/Box';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getTransactions, resetSummaryStatus, resetTransactionsStatus, selectSettings, selectSummary, selectTransaction, setActivePeriodFilter } from 'store/reducers';\nimport { Period, Transaction as TransactionModel } from 'shared/models';\nimport { PERIOD_OPTIONS, ROUTES } from 'shared/constants';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport EmptyState from 'shared/components/EmptyState';\nimport Transaction from '../components/Transaction';\n\nconst TransactionList: React.FC<{}> = () => {\n  const dispatch = useAppDispatch();\n  const { transactions, status } = useAppSelector(selectTransaction);\n  const { activePeriodFilter } = useAppSelector(selectSummary);\n  const { defaultPeriod } = useAppSelector(selectSettings);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const periodOptions = PERIOD_OPTIONS;\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getTransactions(activePeriodFilter));\n    }\n  }, [dispatch, status, activePeriodFilter]);\n\n  const handleTransactionClick = ({ id, name }: TransactionModel): void => {\n    navigate(`${ROUTES.transactions.path}/view/${name}`, { state: { id } });\n  };\n\n  const handlePeriodChange = (event: SelectChangeEvent): void => {\n    const period = event.target.value as Period;\n\n    dispatch(setActivePeriodFilter(period));\n    dispatch(resetTransactionsStatus());\n    dispatch(resetSummaryStatus());\n  };\n\n  const getTransactionData = (data: TransactionModel): TransactionModel => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name,\n      accountName: data.accountNameKey ? t(data.accountNameKey) : data.accountName\n    };\n  };\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='list' />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !transactions?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('TRANSACTIONS.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {\n          transactions.map((transaction) => (\n            <Grid item key={transaction.id} xs={12}>\n              <Transaction data={getTransactionData(transaction)} onClick={handleTransactionClick} />\n            </Grid>\n          ))\n        }\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle text={t('TRANSACTIONS.PAGE_TITLE')} />\n      <Box sx={{ marginBottom: 3, display: 'flex', justifyContent: 'flex-end' }}>\n        <Select\n          variant='outlined'\n          value={activePeriodFilter || defaultPeriod}\n          onChange={handlePeriodChange}\n        >\n          {periodOptions.map(({ value, label }) => (\n            <MenuItem value={value} key={value}>{t(label)}</MenuItem>\n          ))}\n        </Select>\n      </Box>\n      <Grid container rowGap={2}>\n        {renderContent()}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TransactionList;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport date, { LocalizedDate } from 'core/date';\nimport { useTranslation } from 'core/i18n';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useTheme } from '@mui/material/styles';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  getCategories,\n  selectCategory,\n  addTransaction,\n  selectTransaction,\n  selectAccount,\n  getAccounts,\n  selectSettings,\n  selectCurrentTransaction,\n  getTransaction,\n  editTransaction,\n  selectCategoryStatus,\n  selectAccountStatus,\n  deleteTransaction,\n  selectTransactionError,\n  resetGetTransactionStatus,\n  setGetTransactionErrorStatus\n} from 'store/reducers';\nimport { CategoryType, Category as CategoryModel, TransactionField, TransactionDTO, Account, ManageMode, Transaction, IconType } from 'shared/models';\nimport { TABS, POSITIVE_NUMERIC_REGEX, ROUTES } from 'shared/constants';\nimport { getAccountLabel, getPageTitle, mapCategoryTypesWithTranslations, mapCurrencyStringToInputString, transactionHelper } from 'shared/helpers';\nimport FormInput from 'shared/components/FormInput';\nimport Button from 'shared/components/Button';\nimport Snackbar from 'shared/components/Snackbar';\nimport PageTitle from 'shared/components/PageTitle';\nimport CategoryIcon from 'shared/components/CategoryIcon';\nimport FormDatePicker from 'shared/components/FormDatePicker';\nimport FormSelect from 'shared/components/FormSelect';\nimport FormRadioGroup from 'shared/components/FormRadioGroup';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport AccountOption from 'shared/components/AccountOption';\nimport FormIcon from 'shared/components/FormIcon';\n\ninterface CreateEditTransactionProps {\n  mode: ManageMode;\n}\n\nconst CreateEditTransaction: React.FC<CreateEditTransactionProps> = ({ mode }) => {\n  const regex = POSITIVE_NUMERIC_REGEX;\n  const tabs = TABS;\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const { categories } = useAppSelector(selectCategory);\n  const categoryStatus = useAppSelector(selectCategoryStatus);\n  const { getStatus, createEditStatus, deleteStatus } = useAppSelector(selectTransaction);\n  const error = useAppSelector(selectTransactionError);\n  const { accounts } = useAppSelector(selectAccount);\n  const accountStatus = useAppSelector(selectAccountStatus);\n  const { defaultAccount = '' } = useAppSelector(selectSettings);\n  const transaction = useAppSelector(selectCurrentTransaction);\n  const { palette: { info: { contrastText } } } = useTheme();\n  const helper = transactionHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = createEditStatus === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const transactionId = state?.id as TransactionDTO['id'];\n  const transactionName = transaction?.nameKey ? t(transaction.nameKey) : (transaction?.name || '');\n  const categoryType = state?.categoryType as CategoryType || CategoryType.expense;\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n  const title = getPageTitle<Transaction>(mode, t, getStatus, 'TRANSACTIONS', 'NEW_TRANSACTION', 'EMPTY_TITLE', transaction);\n\n  const defaultValues: Partial<Transaction> = {\n    amount: '',\n    categoryId: '',\n    accountId: defaultAccount || '',\n    type: String(categoryType) as unknown as number,\n    createdAt: isCreateMode ? date().format() : undefined,\n    note: ''\n  };\n\n  const methods = useForm<Transaction>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { setValue, handleSubmit, watch, reset } = methods;\n  const watchType = watch(TransactionField.type);\n  const watchAccount = watch(TransactionField.accountId);\n  const watchCreatedAt = watch(TransactionField.createdAt);\n\n  const getCategoryData = (data: CategoryModel): CategoryModel => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name\n    };\n  };\n\n  const handleCategoryTypeChange = (value: string): void => {\n    const type = Number(value) as CategoryType;\n\n    setValue(TransactionField.type, type, { shouldValidate: true });\n    setValue(TransactionField.categoryId, defaultValues.categoryId as string);\n    setValue(TransactionField.icon, defaultValues.icon as IconType);\n    setValue(TransactionField.name, defaultValues.name as string);\n  };\n\n  const handleCategoryIconClick = ({ id, name, nameKey, icon }: CategoryModel): void => {\n    if (isViewMode) {\n      return;\n    }\n\n    setValue(TransactionField.categoryId, id, { shouldValidate: true });\n    setValue(TransactionField.icon, icon);\n    setValue(TransactionField.name, name, { shouldValidate: true });\n    setValue('nameKey', nameKey);\n  };\n\n  const handleAccountChange = (event: SelectChangeEvent<Account['id']>): void => {\n    setValue(TransactionField.accountId, event.target.value, { shouldValidate: true });\n  };\n\n  const handleDatePickerChange = (value: LocalizedDate | null): void => {\n    setValue(TransactionField.createdAt, value!.format(), { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Transaction): void => {\n    const mappedData: Omit<TransactionDTO, 'percentValue'> = {\n      ...data,\n      amount: Number(data.amount),\n      type: Number(data.type),\n      createdAt: date(data.createdAt).toDate()\n    };\n\n    isEditMode\n      ? dispatch(editTransaction([transactionId, mappedData]))\n      : dispatch(addTransaction(mappedData));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isCreateMode\n      ? navigate(ROUTES.dashboard.path)\n      : navigate(`${ROUTES.transactions.path}/view/${transactionName}`, { state: { id: transactionId } });\n  };\n\n  const handleDeleteTransaction = (): void => {\n    dispatch(deleteTransaction(transactionId));\n    setDeleteClicked(true);\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.transactions.path}/edit/${transactionName}`, { state: { id: transactionId } });\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (transaction) {\n      setValue(TransactionField.categoryId, transaction.categoryId);\n      setValue(TransactionField.accountId, transaction.accountId);\n      setValue(TransactionField.icon, transaction.icon);\n      setValue(TransactionField.amount, mapCurrencyStringToInputString(transaction.amount));\n      setValue(TransactionField.type, String(transaction.type) as unknown as number);\n      setValue(TransactionField.createdAt, transaction.createdAt);\n      setValue(TransactionField.note, transaction.note);\n      setValue('name', transaction.name);\n    }\n  }, [transaction, setValue]);\n\n  const resetTransaction = React.useCallback(() => {\n    dispatch(resetGetTransactionStatus());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    navigate(`${isCreateMode ? ROUTES.dashboard.path : ROUTES.transactions.path}`);\n    resetTransaction();\n  }, [navigate, resetTransaction, isCreateMode]);\n\n  React.useEffect(() => {\n    if (categoryStatus === 'idle') {\n      dispatch(getCategories());\n    }\n\n    if (accountStatus === 'idle') {\n      dispatch(getAccounts());\n    }\n  }, [dispatch, categoryStatus, accountStatus]);\n\n  React.useEffect(() => {\n    if (createEditStatus === 'succeeded' && formSubmitted) {\n      goBack();\n      setShowSnackbar(false);\n      dispatch(getAccounts());\n    }\n\n    if (createEditStatus === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [dispatch, goBack, createEditStatus, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (!transactionId) {\n      dispatch(setGetTransactionErrorStatus());\n    }\n  }, [transactionId, dispatch]);\n\n  React.useEffect(() => {\n    if (transactionId && getStatus === 'idle' && !isCreateMode && !deleteClicked) {\n      dispatch(getTransaction(transactionId));\n    }\n  }, [transactionId, isCreateMode, getStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setValue(TransactionField.accountId, defaultAccount);\n  }, [setValue, defaultAccount]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetTransaction();\n    };\n  }, [resetTransaction]);\n\n  const renderContent = (): React.ReactElement => {\n    if (getStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!transaction || !transactionId) && getStatus === 'failed') {\n      return <EmptyState text={t('TRANSACTIONS.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={7}>\n          <Grid item xs={12}>\n            <Typography color={contrastText}>{t('COMMON.TYPE')}</Typography>\n            <FormRadioGroup\n              readonly={isViewMode}\n              name={TransactionField.type}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.type.required!.message)\n                }\n              }}\n              options={mapCategoryTypesWithTranslations(tabs, t)}\n              labelColor={contrastText}\n              value={watchType}\n              onRadioChange={handleCategoryTypeChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.AMOUNT')}\n              type='number'\n              name={TransactionField.amount}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.amount.required!.message)\n                },\n                pattern: {\n                  value: regex,\n                  message: t(helper.amount.pattern!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormSelect\n              inputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.ACCOUNT')}\n              name={TransactionField.accountId}\n              value={accounts.length ? (watchAccount || defaultAccount) : ''}\n              onChange={handleAccountChange}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.accountId.required!.message)\n                }\n              }}\n              renderValue={(value) => (\n                <Typography>{getAccountLabel(value, accounts, t)}</Typography>\n              )}\n            >\n              {accounts.map((account) => (\n                <MenuItem key={account.id} value={account.id} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <AccountOption data={account} />\n                </MenuItem>\n              ))}\n            </FormSelect>\n          </Grid>\n          <Grid item xs={12}>\n            <FormDatePicker\n              disableFuture\n              readOnly={isViewMode}\n              name={TransactionField.createdAt}\n              label={t('COMMON.DATE')}\n              value={date(watchCreatedAt).isValid() ? date(watchCreatedAt) : null}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.createdAt.required!.message),\n                },\n                validate: {\n                  maxDate: (value: string) =>\n                    Promise.resolve(date(value) <= date() || t(helper.createdAt.max!.message))\n                }\n              }}\n              onChange={handleDatePickerChange}\n              sx={{ width: '100%' }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              inputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.NOTE')}\n              name={TransactionField.note}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormIcon\n              name={TransactionField.categoryId}\n              label={t('COMMON.CATEGORY')}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.categoryId.required!.message)\n                }\n              }}\n              render={({ field }) => (\n                <Grid container {...field} columnGap={4} rowGap={4}>\n                  {\n                    categories.filter(({ type }) => type === Number(watchType)).map((category) => (\n                      <Grid item key={category.id}>\n                        <CategoryIcon data={getCategoryData(category)} selected={field.value} readonly={isViewMode} onItemClick={handleCategoryIconClick} />\n                      </Grid>\n                    ))\n                  }\n                </Grid>\n              )} />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode && !!transaction}\n        withDeleteButton={isEditMode && !!transaction}\n        withCancelButton={!isViewMode && !!transaction}\n        text={title}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4, marginBottom: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save transaction' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' open={showSnackbar} text={error?.messageKey ? t(error.messageKey) : error?.message || ''} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('TRANSACTIONS.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteTransaction}\n      >\n        <Typography variant='subtitle1'>\n          {t('TRANSACTIONS.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditTransaction;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport TransactionList from './pages/TransactionList';\nimport CreateEditTransaction from './pages/CreateEditTransaction';\n\nconst Transactions: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<TransactionList />} />\n      <Route path='/new' element={<CreateEditTransaction mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditTransaction mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditTransaction mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.accounts.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Transactions;\n","import * as React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { DatePicker as MuiDatePicker, DatePickerProps as MuiDatePickerProps } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { LocalizedDate } from 'core/date';\nimport { FormControlRules } from 'shared/models';\n\ntype FormDatePickerProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & MuiDatePickerProps<LocalizedDate>;\n\nconst FormDatePicker: React.FC<FormDatePickerProps> = ({ name, label, rules = {}, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer sx={{ ...props.sx, paddingTop: 2, overflow: 'initial' }} components={['DatePicker']}>\n        <Controller\n          control={control}\n          name={name}\n          rules={rules}\n          render={({ field, fieldState: { error } }) => (\n            <Box position='relative' sx={{ width: '100%' }}>\n              <InputLabel>{label}</InputLabel>\n              <MuiDatePicker\n                {...field}\n                {...props} />\n              {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n            </Box>\n          )}\n        />\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n};\n\nexport default FormDatePicker;\n","import * as React from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport Select, { SelectProps } from '@mui/material/Select';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport { FormControlRules } from 'shared/models';\n\nexport interface SelectOption {\n  label: string;\n  value: string;\n}\n\ntype FormSelectProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & SelectProps<SelectOption['value']>;\n\nconst FormSelect: React.FC<FormSelectProps> = ({ name, label, rules = {}, children, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      rules={rules}\n      render={({ field, fieldState: { error } }) => (\n        <Box position='relative'>\n          <InputLabel>{label}</InputLabel>\n          <Select\n            fullWidth\n            variant='outlined'\n            error={!!errors[name]}\n            {...field}\n            {...props}>\n            {children}\n          </Select>\n          {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n        </Box>\n      )}\n    />\n  );\n};\n\nexport default FormSelect;\n"],"names":["_ref","data","onClick","palette","primary","main","contrastText","error","useTheme","name","icon","accountName","accountIcon","createdAt","amount","type","formattedCreatedAt","date","format","DATE_FORMAT","_jsx","Paper","elevation","sx","paddingX","backgroundColor","onTransactionClick","children","_jsxs","Grid","container","columnSpacing","alignItems","minHeight","cursor","item","xs","display","Icon","color","fontSize","sm","Typography","noWrap","justifyContent","CategoryType","expense","TransactionList","dispatch","useAppDispatch","transactions","status","useAppSelector","selectTransaction","activePeriodFilter","selectSummary","defaultPeriod","selectSettings","navigate","useNavigate","t","useTranslation","periodOptions","PERIOD_OPTIONS","React","getTransactions","handleTransactionClick","id","concat","ROUTES","path","state","Box","flexGrow","PageTitle","text","marginBottom","Select","variant","value","onChange","event","period","target","setActivePeriodFilter","resetTransactionsStatus","resetSummaryStatus","map","_ref2","label","MenuItem","rowGap","Skeleton","length","_Fragment","transaction","Transaction","nameKey","accountNameKey","EmptyState","mode","regex","POSITIVE_NUMERIC_REGEX","tabs","TABS","useLocation","categories","selectCategory","categoryStatus","selectCategoryStatus","getStatus","createEditStatus","deleteStatus","selectTransactionError","accounts","selectAccount","accountStatus","selectAccountStatus","defaultAccount","selectCurrentTransaction","info","helper","transactionHelper","formSubmitted","setFormSubmitted","deleteClicked","setDeleteClicked","showSnackbar","setShowSnackbar","dialogOpened","setDialogOpened","loading","deleteLoading","transactionId","transactionName","categoryType","isCreateMode","ManageMode","create","isEditMode","edit","isViewMode","view","title","getPageTitle","defaultValues","categoryId","accountId","String","undefined","note","methods","useForm","reValidateMode","setValue","handleSubmit","watch","reset","watchType","TransactionField","watchAccount","watchCreatedAt","handleCategoryTypeChange","Number","shouldValidate","handleCategoryIconClick","handleAccountChange","handleDatePickerChange","handleFormSubmit","mappedData","toDate","editTransaction","addTransaction","setFormValues","mapCurrencyStringToInputString","resetTransaction","resetGetTransactionStatus","goBack","dashboard","getCategories","getAccounts","setGetTransactionErrorStatus","getTransaction","component","flexDirection","onSubmit","withBackButton","withEditButton","withDeleteButton","withCancelButton","onBackButtonClick","onEditButtonClick","handleEditButtonClick","onDeleteButtonClick","handleOpenDialog","onCancelButtonClick","handleCancelButtonClick","FormProvider","FormRadioGroup","readonly","rules","required","message","options","mapCategoryTypesWithTranslations","labelColor","onRadioChange","FormInput","InputProps","readOnly","pattern","FormSelect","inputProps","renderValue","getAccountLabel","account","AccountOption","FormDatePicker","disableFuture","isValid","validate","maxDate","Promise","resolve","max","width","FormIcon","render","_ref3","field","columnGap","filter","_ref4","category","CategoryIcon","selected","onItemClick","marginTop","Button","fullWidth","Snackbar","open","messageKey","onClose","handleSnackbarClose","Dialog","maxWidth","actionButtonText","handleCloseDialog","onAction","handleDeleteTransaction","deleteTransaction","Transactions","Routes","Route","element","CreateEditTransaction","Navigate","to","replace","props","control","formState","errors","useFormContext","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","paddingTop","overflow","components","Controller","fieldState","position","InputLabel","MuiDatePicker","FormHelperText"],"sourceRoot":""}