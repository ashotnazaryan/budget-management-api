{"version":3,"file":"static/js/291.2fa67818.chunk.js","mappings":"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","sources":["modules/Categories/pages/CategoryList.tsx","modules/Categories/pages/CreateEditCategory.tsx","modules/Categories/Categories.tsx","shared/components/ItemIcon.tsx","shared/components/Tabs.styles.ts","shared/components/Tabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Box from '@mui/system/Box';\nimport Grid from '@mui/material/Grid';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getCategories, selectCategory } from 'store/reducers';\nimport { Category, CategoryType, IconType, Option } from 'shared/models';\nimport { ROUTES, TABS } from 'shared/constants';\nimport Tabs from 'shared/components/Tabs';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport CategoryIcon from 'shared/components/CategoryIcon';\nimport EmptyState from 'shared/components/EmptyState';\n\nconst CategoryList: React.FC<{}> = () => {\n  const tabs = TABS;\n  const dispatch = useAppDispatch();\n  const { categories, status } = useAppSelector(selectCategory);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const [categoryType, setCategoryType] = React.useState<Option['value']>(String(CategoryType.expense));\n\n  const addIconData: Category = {\n    id: '',\n    name: 'New category',\n    nameKey: 'CATEGORIES.NEW_CATEGORY',\n    icon: IconType.plus,\n    type: Number(categoryType)\n  };\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getCategories());\n    }\n  }, [dispatch, status]);\n\n  const handleTabChange = (event: React.SyntheticEvent, value: Option['value']): void => {\n    setCategoryType(value);\n  };\n\n  const handleCategoryIconClick = ({ id, name }: Category): void => {\n    navigate(`${ROUTES.categories.path}/view/${name}`, { state: { id } });\n  };\n\n  const openNewCategoryPage = (): void => {\n    navigate(`${ROUTES.categories.path}/new`, { state: { categoryType } });\n  };\n\n  const getCategoryData = (data: Category): Category => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name\n    };\n  };\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='circular' />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !categories?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('CATEGORIES.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {categories\n          .filter(({ type }) => String(type) === categoryType)\n          .map((category) => (\n            <Grid item key={category.id}>\n              <CategoryIcon data={getCategoryData(category)} onItemClick={handleCategoryIconClick} />\n            </Grid>\n          ))}\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle text={t('CATEGORIES.PAGE_TITLE')} />\n      <Tabs centered defaultValue={categoryType} tabs={tabs} onChange={handleTabChange} sx={{ marginBottom: 3 }} />\n      <Grid container columnGap={4} rowGap={4} sx={{ marginTop: 4 }}>\n        {renderContent()}\n        <Grid item>\n          <CategoryIcon data={getCategoryData(addIconData)} onItemClick={openNewCategoryPage} />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CategoryList;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  createCategory,\n  editCategory,\n  getCategory,\n  selectCategory,\n  selectCurrentCategory,\n  resetGetCategoryStatus,\n  selectCategoryError,\n  deleteCategory,\n  setGetCategoryErrorStatus\n} from 'store/reducers';\nimport { CATEGORY_ICONS_LIST, TABS, ROUTES } from 'shared/constants';\nimport { Category, CategoryDTO, CategoryField, CategoryType, IconType, ManageMode } from 'shared/models';\nimport { categoryHelper, getPageTitle, mapCategoryTypesWithTranslations } from 'shared/helpers';\nimport PageTitle from 'shared/components/PageTitle';\nimport Button from 'shared/components/Button';\nimport FormInput from 'shared/components/FormInput';\nimport Snackbar from 'shared/components/Snackbar';\nimport ItemIcon from 'shared/components/ItemIcon';\nimport FormRadioGroup from 'shared/components/FormRadioGroup';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport FormIcon from 'shared/components/FormIcon';\n\ninterface NewCategoryProps {\n  mode: ManageMode;\n}\n\nconst CreateEditCategory: React.FC<NewCategoryProps> = ({ mode }) => {\n  const tabs = TABS;\n  const icons = CATEGORY_ICONS_LIST;\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const dispatch = useAppDispatch();\n  const { getStatus, createEditStatus, deleteStatus } = useAppSelector(selectCategory);\n  const error = useAppSelector(selectCategoryError);\n  const category = useAppSelector(selectCurrentCategory);\n  const { palette: { info: { contrastText } } } = useTheme();\n  const helper = categoryHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = createEditStatus === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const categoryId = state?.id as CategoryDTO['id'];\n  const categoryName = category?.nameKey ? t(category.nameKey) : (category?.name || '');\n  const categoryType = state?.categoryType as CategoryType;\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n  const title = getPageTitle<Category>(mode, t, getStatus, 'CATEGORIES', 'NEW_CATEGORY', 'EMPTY_TITLE', category);\n\n  const defaultValues: Partial<Category> = {\n    type: String(categoryType) as unknown as number,\n    name: '',\n  };\n\n  const methods = useForm<Category>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { setValue, handleSubmit, watch, reset } = methods;\n  const watchType = Number(watch(CategoryField.type));\n\n  const handleAccountIconClick = ({ id }: { id: string }): void => {\n    if (isViewMode) {\n      return;\n    }\n\n    setValue(CategoryField.icon, id as IconType, { shouldValidate: true });\n  };\n\n  const handleCategoryTypeChange = (value: string): void => {\n    const type = Number(value) as CategoryType;\n\n    setValue(CategoryField.type, type, { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Category): void => {\n    isEditMode ? dispatch(editCategory([categoryId, data])) : dispatch(createCategory(data));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isEditMode\n      ? navigate(`${ROUTES.categories.path}/view/${categoryName}`, { state: { id: categoryId } })\n      : navigate(ROUTES.categories.path);\n  };\n\n  const handleDeleteCategory = (): void => {\n    dispatch(deleteCategory(categoryId));\n    setDeleteClicked(true);\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.categories.path}/edit/${categoryName}`, { state: { id: categoryId } });\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (category) {\n      setValue(CategoryField.type, String(category.type) as unknown as number);\n      setValue(CategoryField.name, category.nameKey ? t(category.nameKey) : category.name);\n      setValue(CategoryField.icon, category.icon);\n    }\n  }, [category, setValue, t]);\n\n  const resetCategory = React.useCallback(() => {\n    dispatch(resetGetCategoryStatus());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    navigate(`${ROUTES.categories.path}`);\n    resetCategory();\n  }, [navigate, resetCategory]);\n\n  React.useEffect(() => {\n    if (createEditStatus === 'succeeded' && formSubmitted) {\n      goBack();\n      setShowSnackbar(false);\n    }\n\n    if (createEditStatus === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [goBack, createEditStatus, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (!categoryId) {\n      dispatch(setGetCategoryErrorStatus());\n    }\n  }, [categoryId, dispatch]);\n\n  React.useEffect(() => {\n    if (categoryId && getStatus === 'idle' && (isEditMode || isViewMode) && !deleteClicked) {\n      dispatch(getCategory(categoryId));\n    }\n  }, [categoryId, isEditMode, isViewMode, getStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetCategory();\n    };\n  }, [resetCategory]);\n\n  const renderContent = (): React.ReactElement => {\n    if (getStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!category || !categoryId) && getStatus === 'failed') {\n      return <EmptyState text={t('CATEGORIES.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={5}>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.NAME')}\n              name={CategoryField.name}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.name.required!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color={contrastText} sx={{ marginY: 1 }}>{t('COMMON.TYPE')}</Typography>\n            <FormRadioGroup\n              readonly={isViewMode}\n              name={CategoryField.type}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.type.required!.message)\n                }\n              }}\n              options={mapCategoryTypesWithTranslations(tabs, t)}\n              labelColor={contrastText}\n              value={watchType}\n              onRadioChange={handleCategoryTypeChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormIcon\n              name={CategoryField.icon}\n              label={t('COMMON.ICON')}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.icon.required!.message)\n                }\n              }}\n              render={({ field }) => (\n                <Grid container {...field} columnGap={1} rowGap={3} sx={{ marginTop: 2 }}>\n                  {\n                    icons.map(({ name }) => (\n                      <Grid item key={name}>\n                        <ItemIcon selected={field.value} id={name} icon={name} size={50} readonly={isViewMode} onClick={handleAccountIconClick} />\n                      </Grid>\n                    ))\n                  }\n                </Grid>\n              )} />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode && !!category}\n        withDeleteButton={isEditMode && !!category}\n        withCancelButton={!isViewMode && !!category}\n        text={title}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4, marginBottom: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save category' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' text={error?.messageKey ? t(error.messageKey) : error?.message || ''} open={showSnackbar} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('CATEGORIES.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteCategory}\n      >\n        <Typography variant='subtitle1'>\n          {t('CATEGORIES.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditCategory;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport CategoryList from './pages/CategoryList';\nimport CreateEditCategory from './pages/CreateEditCategory';\n\nconst Categories: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<CategoryList />} />\n      <Route path='/new' element={<CreateEditCategory mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditCategory mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditCategory mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.categories.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Categories;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport { IconType } from 'shared/models';\nimport Icon from 'shared/components/Icon';\n\ninterface ItemIconProps {\n  id: string;\n  icon: IconType;\n  selected?: string;\n  size?: number;\n  disabled?: boolean;\n  readonly?: boolean;\n  onClick?: ({ id }: { id: string }) => void;\n}\n\nconst ItemIcon: React.FC<ItemIconProps> = ({ id, selected, icon, size = 64, disabled, readonly, onClick }) => {\n  const { palette: { primary: { main, contrastText }, action } } = useTheme();\n\n  const onItemClick = (id: string) => (): void => {\n    if (readonly) {\n      return;\n    }\n\n    if (onClick) {\n      onClick({ id });\n    }\n  };\n\n  const getColor = (): string => {\n    return selected === id ? contrastText : main;\n  };\n\n  const getBorder = (): string => {\n    return disabled ? 'none' : `1px solid ${main}`;\n  };\n\n  const getBackgroundColor = (): string => {\n    if (disabled) {\n      return action.disabled;\n    }\n\n    return selected === id ? main : 'transparent';\n  };\n\n  return (\n    <Box display='flex' flexDirection='column' alignItems='center' width={size + 20}>\n      <Box\n        onClick={onItemClick(id)}\n        sx={{\n          backgroundColor: getBackgroundColor(),\n          border: getBorder(),\n          color: getColor(),\n          height: size,\n          width: size,\n          borderRadius: '50%',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: (disabled || readonly) ? 'default' : 'pointer'\n        }}>\n        <Icon name={icon}></Icon>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ItemIcon;\n","import styled from '@emotion/styled';\nimport Tabs from '@mui/material/Tabs';\n\nexport const StyledTabs = styled(Tabs)({\n  '&.MuiTabs-root': {\n  }\n});\n","import * as React from 'react';\nimport { TabsProps as MuiTabsProps } from '@mui/material/Tabs';\nimport MuiTab from '@mui/material/Tab';\nimport { useTranslation } from 'core/i18n';\nimport { Option } from 'shared/models';\nimport { StyledTabs } from './Tabs.styles';\n\ntype TabsProps = {\n  tabs: Option[];\n  defaultValue?: Option['value'];\n  onChange: (event: React.SyntheticEvent, value: Option['value']) => void;\n} & MuiTabsProps;\n\nconst Tabs: React.FC<TabsProps> = ({ tabs, defaultValue = '0', onChange, ...props }) => {\n  const { t } = useTranslation();\n  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);\n\n  const onValueChange = (event: React.SyntheticEvent, selectedValue: Option['value']): void => {\n    setSelectedValue(selectedValue);\n    onChange(event, selectedValue);\n  };\n\n  return (\n    <StyledTabs {...props} value={selectedValue} onChange={onValueChange}>\n      {\n        tabs.map(({ value, label }) => (\n          <MuiTab value={value} key={value} label={t(label)} />\n        ))\n      }\n    </StyledTabs>\n  );\n};\n\nexport default Tabs;\n"],"names":["CategoryList","tabs","TABS","dispatch","useAppDispatch","categories","status","useAppSelector","selectCategory","navigate","useNavigate","t","useTranslation","categoryType","setCategoryType","React","String","CategoryType","addIconData","id","name","nameKey","icon","IconType","type","Number","getCategories","handleCategoryIconClick","_ref","concat","ROUTES","state","getCategoryData","data","_jsxs","Box","flexGrow","children","_jsx","PageTitle","text","Tabs","centered","defaultValue","onChange","handleTabChange","event","value","sx","marginBottom","Grid","container","columnGap","rowGap","marginTop","item","xs","Skeleton","length","_Fragment","filter","_ref2","map","category","CategoryIcon","onItemClick","EmptyState","openNewCategoryPage","mode","icons","CATEGORY_ICONS_LIST","useLocation","getStatus","createEditStatus","deleteStatus","error","selectCategoryError","selectCurrentCategory","palette","info","contrastText","useTheme","helper","categoryHelper","formSubmitted","setFormSubmitted","deleteClicked","setDeleteClicked","showSnackbar","setShowSnackbar","dialogOpened","setDialogOpened","loading","deleteLoading","categoryId","categoryName","isCreateMode","ManageMode","isEditMode","isViewMode","title","getPageTitle","defaultValues","methods","useForm","reValidateMode","setValue","handleSubmit","watch","reset","watchType","CategoryField","handleAccountIconClick","shouldValidate","handleCategoryTypeChange","handleFormSubmit","editCategory","createCategory","setFormValues","resetCategory","resetGetCategoryStatus","goBack","setGetCategoryErrorStatus","getCategory","component","display","flexDirection","onSubmit","withBackButton","withEditButton","withDeleteButton","withCancelButton","onBackButtonClick","onEditButtonClick","handleEditButtonClick","onDeleteButtonClick","handleOpenDialog","onCancelButtonClick","handleCancelButtonClick","FormProvider","FormInput","InputProps","readOnly","label","rules","required","message","Typography","color","marginY","FormRadioGroup","readonly","options","mapCategoryTypesWithTranslations","labelColor","onRadioChange","FormIcon","render","_ref3","field","_ref4","ItemIcon","selected","size","onClick","justifyContent","sm","Button","fullWidth","variant","Snackbar","messageKey","open","onClose","handleSnackbarClose","Dialog","maxWidth","actionButtonText","handleCloseDialog","onAction","handleDeleteCategory","deleteCategory","Categories","Routes","Route","path","element","CreateEditCategory","Navigate","to","replace","disabled","primary","main","action","alignItems","width","backgroundColor","border","height","borderRadius","cursor","Icon","StyledTabs","styled","props","selectedValue","setSelectedValue","onValueChange","MuiTab"],"sourceRoot":""}