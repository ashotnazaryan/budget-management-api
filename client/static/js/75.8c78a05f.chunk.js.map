{"version":3,"file":"static/js/75.8c78a05f.chunk.js","mappings":"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","sources":["modules/Accounts/components/Account.tsx","modules/Accounts/components/TransferButtons.tsx","modules/Accounts/pages/AccountList.tsx","modules/Accounts/pages/CreateEditAccount.tsx","modules/Accounts/Accounts.tsx","shared/components/EmptyState.tsx","shared/components/FormIcon.tsx","shared/components/ItemIcon.tsx","shared/components/Snackbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport { Account as AccountModel } from 'shared/models';\nimport Icon from 'shared/components/Icon';\nimport Balance from 'shared/components/Balance';\n\ninterface AccountProps {\n  data: AccountModel;\n  onClick?: (data: AccountModel) => void;\n}\n\nconst Account: React.FC<AccountProps> = ({ data, onClick }) => {\n  const { palette: { primary: { main, contrastText } } } = useTheme();\n  const { name, icon, balance } = data;\n\n  const onAccountClick = (): void => {\n    if (onClick) {\n      onClick(data);\n    }\n  };\n\n  return (\n    <Paper elevation={1} sx={{ paddingX: 2, backgroundColor: main }}>\n      <Grid container display='flex' alignItems='center' justifyContent='space-between' flexGrow={1} columnSpacing={2}\n        sx={{\n          borderRadius: 1,\n          minHeight: 40,\n          cursor: 'pointer'\n        }}\n        onClick={onAccountClick}>\n        <Grid item xs={1} display='flex'>\n          {icon && <Icon name={icon} sx={{ fontSize: { sm: 22, xs: 18 }, color: contrastText }}></Icon>}\n        </Grid>\n        <Grid item xs={7} display='flex'>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{name}</Typography>\n        </Grid>\n        <Grid item xs={4} display='flex' justifyContent='flex-end'>\n          <Balance balance={balance} positiveColor={contrastText} fontSize={{ sm: 15, xs: 13 }} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Account;\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport { useTranslation } from 'core/i18n';\nimport { IconType, Summary } from 'shared/models';\nimport { ROUTES } from 'shared/constants';\nimport Icon from 'shared/components/Icon';\nimport Balance from 'shared/components/Balance';\nimport Button from 'shared/components/Button';\nimport Box, { BoxProps } from '@mui/material/Box';\n\ntype TransferButtonsProps = {\n  balance: Summary['balance'];\n} & BoxProps\n\nconst TransferButtons: React.FC<TransferButtonsProps> = ({ balance, ...props }) => {\n  const { palette: { info: { contrastText } } } = useTheme();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  const openAccountTransferPage = (): void => {\n    navigate(`${ROUTES.transfers.path}/new`);\n  };\n\n  const openTransferListPage = (): void => {\n    navigate(`${ROUTES.transfers.path}`);\n  };\n\n  return (\n    <Box\n      sx={{ ...props.sx, display: 'flex', flexDirection: 'column', paddingBottom: 3, borderBottom: (theme) => `1px solid ${theme.palette.secondary.main}` }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: 3 }}>\n        <Typography noWrap color={contrastText} fontSize={18} sx={{ marginRight: 1 }}>{t('COMMON.BALANCE')}</Typography>\n        <Balance balance={balance} fontSize={18} />\n      </Box>\n      <Box sx={{ display: 'flex', flexDirection: { sm: 'row', xs: 'column' }, alignItems: 'center', justifyContent: 'space-between', gap: 3 }}>\n        <Button\n          aria-label='New transfer'\n          color='secondary'\n          variant='contained'\n          startIcon={<Icon name={IconType.currencyExchange}></Icon>}\n          sx={{ width: { sm: 'auto', xs: '100%' }, fontSize: 14 }}\n          onClick={openAccountTransferPage}>\n          {t('TRANSFERS.NEW_TRANSFER')}\n        </Button>\n        <Button\n          aria-label='Transfer history'\n          color='secondary'\n          startIcon={<Icon name={IconType.history}></Icon>}\n          sx={{ width: { sm: 'auto', xs: '100%' }, fontSize: 14 }}\n          onClick={openTransferListPage}>\n          {t('TRANSFERS.TRANSFER_HISTORY')}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default TransferButtons;\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Box from '@mui/system/Box';\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { IconType, Account as AccountModel } from 'shared/models';\nimport { ROUTES } from 'shared/constants';\nimport { getAccounts, getBalance, selectAccount, selectSummary } from 'store/reducers';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport Icon from 'shared/components/Icon';\nimport EmptyState from 'shared/components/EmptyState';\nimport Account from '../components/Account';\nimport TransferButtons from '../components/TransferButtons';\n\nconst AccountList: React.FC<{}> = () => {\n  const dispatch = useAppDispatch();\n  const { accounts, status } = useAppSelector(selectAccount);\n  const { balance, balanceStatus } = useAppSelector(selectSummary);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  const openNewAccountPage = (): void => {\n    navigate(`${ROUTES.accounts.path}/new`);\n  };\n\n  const handleAccountItemClick = ({ id, name }: AccountModel): void => {\n    navigate(`${ROUTES.accounts.path}/view/${name}`, { state: { id } });\n  };\n\n  const getAccountData = (data: AccountModel): AccountModel => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name\n    };\n  };\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getAccounts());\n    }\n  }, [dispatch, status]);\n\n  React.useEffect(() => {\n    if (balanceStatus === 'idle') {\n      dispatch(getBalance());\n    }\n  }, [dispatch, balanceStatus]);\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='list' />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !accounts?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('ACCOUNTS.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {accounts.map((account) => (\n          <Grid item key={account.id} xs={12}>\n            <Account data={getAccountData(account)} onClick={handleAccountItemClick} />\n          </Grid>\n        ))}\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <TransferButtons balance={balance} sx={{ marginTop: 2, marginBottom: 4 }} />\n      <PageTitle text={t('ACCOUNTS.PAGE_TITLE')} sx={{ marginBottom: 4 }} />\n      <Grid container rowGap={2} sx={{ marginTop: 4 }}>\n        {renderContent()}\n        <Grid item xs={12} display='flex' justifyContent='flex-end'>\n          <IconButton color='primary' onClick={openNewAccountPage} sx={{ alignSelf: 'flex-end' }}>\n            <Icon name={IconType.plus} sx={{ fontSize: 40 }}></Icon>\n          </IconButton>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default AccountList;","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  createAccount,\n  deleteAccount,\n  editAccount,\n  getAccount,\n  resetGetAccountStatus,\n  selectAccount,\n  selectAccountError,\n  selectCurrentAccount,\n  selectSettings,\n  setGetAccountErrorStatus\n} from 'store/reducers';\nimport { CURRENCIES, ACCOUNT_ICONS_LIST, NUMERIC_REGEX, ROUTES } from 'shared/constants';\nimport { Account, AccountDTO, AccountField, Currency, IconType, ManageMode } from 'shared/models';\nimport { accountHelper, getPageTitle, mapCurrencyStringToInputString } from 'shared/helpers';\nimport PageTitle from 'shared/components/PageTitle';\nimport Button from 'shared/components/Button';\nimport FormInput from 'shared/components/FormInput';\nimport Snackbar from 'shared/components/Snackbar';\nimport ItemIcon from 'shared/components/ItemIcon';\nimport FormSelect from 'shared/components/FormSelect';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport FormIcon from 'shared/components/FormIcon';\n\ninterface CreateEditAccountProps {\n  mode: ManageMode;\n}\n\nconst CreateEditAccount: React.FC<CreateEditAccountProps> = ({ mode }) => {\n  const regex = NUMERIC_REGEX;\n  const currencies = CURRENCIES;\n  const icons = ACCOUNT_ICONS_LIST;\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const dispatch = useAppDispatch();\n  const { getStatus, createEditStatus, deleteStatus } = useAppSelector(selectAccount);\n  const error = useAppSelector(selectAccountError);\n  const account = useAppSelector(selectCurrentAccount);\n  const { defaultCurrency: { iso } } = useAppSelector(selectSettings);\n  const helper = accountHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = createEditStatus === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const accountId = state?.id as AccountDTO['id'];\n  const accountName = account?.nameKey ? t(account.nameKey) : (account?.name || '');\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n  const title = getPageTitle<Account>(mode, t, getStatus, 'ACCOUNTS', 'NEW_ACCOUNT', 'EMPTY_TITLE', account);\n\n  const defaultValues: Partial<Account> = {\n    balance: 0 as unknown as Account['balance'],\n    name: '',\n    currencyIso: iso\n  };\n\n  const methods = useForm<Account>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { setValue, handleSubmit, watch, reset } = methods;\n  const watchCurrency = watch(AccountField.currencyIso);\n\n  const handleAccountIconClick = ({ id }: { id: string }): void => {\n    if (isViewMode) {\n      return;\n    }\n\n    setValue(AccountField.icon, id as IconType, { shouldValidate: true });\n  };\n\n  const handleCurrencyChange = (event: SelectChangeEvent): void => {\n    const iso = event.target.value as Currency['iso'];\n\n    setValue(AccountField.currencyIso, iso, { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Account): void => {\n    const mappedData: AccountDTO = {\n      ...data,\n      balance: Number(data.balance)\n    };\n\n    isEditMode ? dispatch(editAccount([accountId, mappedData])) : dispatch(createAccount(mappedData));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isEditMode\n      ? navigate(`${ROUTES.accounts.path}/view/${accountName}`, { state: { id: accountId } })\n      : navigate(ROUTES.accounts.path);\n  };\n\n  const handleDeleteAccount = (): void => {\n    dispatch(deleteAccount(accountId));\n    setDeleteClicked(true);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.accounts.path}/edit/${accountName}`, { state: { id: accountId } });\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (account) {\n      setValue(AccountField.name, account.nameKey ? t(account.nameKey) : account.name);\n      setValue(AccountField.icon, account.icon);\n      setValue(AccountField.balance, mapCurrencyStringToInputString(account.balance));\n      setValue(AccountField.currencyIso, account.currencyIso);\n    }\n  }, [account, setValue, t]);\n\n  const resetAccount = React.useCallback(() => {\n    dispatch(resetGetAccountStatus());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    navigate(`${ROUTES.accounts.path}`);\n    resetAccount();\n  }, [navigate, resetAccount]);\n\n  React.useEffect(() => {\n    if (createEditStatus === 'succeeded' && formSubmitted) {\n      goBack();\n      setShowSnackbar(false);\n    }\n\n    if (createEditStatus === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [goBack, createEditStatus, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (!accountId) {\n      dispatch(setGetAccountErrorStatus());\n    }\n  }, [accountId, dispatch]);\n\n  React.useEffect(() => {\n    if (accountId && getStatus === 'idle' && (isEditMode || isViewMode) && !deleteClicked) {\n      dispatch(getAccount(accountId));\n    }\n  }, [accountId, isEditMode, isViewMode, getStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetAccount();\n    };\n  }, [resetAccount]);\n\n  const renderContent = (): React.ReactElement => {\n    if (getStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!account || !accountId) && getStatus === 'failed') {\n      return <EmptyState text={t('ACCOUNTS.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={7}>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.NAME')}\n              name={AccountField.name}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.name.required!.message)\n                },\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.BALANCE')}\n              type='number'\n              name={AccountField.balance}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.balance.required!.message)\n                },\n                pattern: {\n                  value: regex,\n                  message: t(helper.balance.pattern!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormSelect\n              inputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.CURRENCY')}\n              name={AccountField.currencyIso}\n              value={watchCurrency}\n              onChange={handleCurrencyChange}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.currencyIso.required!.message)\n                }\n              }}\n            >\n              {currencies.map(({ iso, name, nameKey, symbol }) => (\n                <MenuItem value={iso} key={iso}>{symbol} {nameKey ? t(nameKey) : name}</MenuItem>\n              ))}\n            </FormSelect>\n          </Grid>\n          <Grid item xs={12}>\n            <FormIcon\n              name={AccountField.icon}\n              label={t('COMMON.ICON')}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.icon.required!.message)\n                }\n              }}\n              render={({ field }) => (\n                <Grid container {...field} columnGap={1} rowGap={3} sx={{ marginTop: 2 }}>\n                  {\n                    icons.map(({ name }) => (\n                      <Grid item key={name}>\n                        <ItemIcon selected={field.value} id={name} icon={name} size={50} readonly={isViewMode} onClick={handleAccountIconClick} />\n                      </Grid>\n                    ))\n                  }\n                </Grid>\n              )} />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode && !!account}\n        withDeleteButton={isEditMode && !!account}\n        withCancelButton={!isViewMode && !!account}\n        text={title}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4, marginBottom: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save account' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' open={showSnackbar} text={error?.messageKey ? t(error.messageKey) : error?.message || ''} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('ACCOUNTS.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteAccount}\n      >\n        <Typography variant='subtitle1'>\n          {t('ACCOUNTS.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditAccount;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport AccountList from './pages/AccountList';\nimport CreateEditAccount from './pages/CreateEditAccount';\n\nconst Accounts: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<AccountList />} />\n      <Route path='/new' element={<CreateEditAccount mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditAccount mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditAccount mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.accounts.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Accounts;\n","import * as React from 'react';\nimport Box, { BoxProps } from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\nimport { useTranslation } from 'core/i18n';\n\ntype EmptyStateProps = {\n  text: string;\n} & BoxProps\n\nconst EmptyState: React.FC<EmptyStateProps> = ({ text, ...props }) => {\n  const { palette: { info: { contrastText } } } = useTheme();\n  const { t } = useTranslation();\n  const textValue = text || t('COMMON.NO_DATA');\n\n  return (\n    <Box\n      display='flex'\n      justifyContent='center'\n      {...props}\n      sx={{\n        width: '100%',\n        ...props.sx\n      }}>\n      <Typography noWrap color={contrastText} fontSize={{ sm: 18, xs: 16 }}>{textValue}</Typography>\n    </Box>\n  );\n};\n\nexport default EmptyState;\n","import * as React from 'react';\nimport { useFormContext, Controller, ControllerRenderProps, ControllerFieldState } from 'react-hook-form';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputLabel from '@mui/material/InputLabel';\nimport { FormControlRules } from 'shared/models';\n\ntype FormIconProps = {\n  name: string;\n  label: string;\n  render: ({ field, fieldState }: { field: ControllerRenderProps, fieldState: ControllerFieldState }) => React.ReactElement;\n  rules?: FormControlRules;\n};\n\nconst FormIcon: React.FC<FormIconProps> = ({ name, label, rules = {}, render }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      rules={rules}\n      render={({ field, fieldState }) => (\n        <>\n          <InputLabel sx={{ marginBottom: 2 }}>{label}</InputLabel>\n          {render({ field, fieldState })}\n          {errors[name] && <FormHelperText error>{fieldState.error?.message}</FormHelperText>}\n        </>\n      )}\n    />\n  );\n};\n\nexport default FormIcon;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport { IconType } from 'shared/models';\nimport Icon from 'shared/components/Icon';\n\ninterface ItemIconProps {\n  id: string;\n  icon: IconType;\n  selected?: string;\n  size?: number;\n  disabled?: boolean;\n  readonly?: boolean;\n  onClick?: ({ id }: { id: string }) => void;\n}\n\nconst ItemIcon: React.FC<ItemIconProps> = ({ id, selected, icon, size = 64, disabled, readonly, onClick }) => {\n  const { palette: { primary: { main, contrastText }, action } } = useTheme();\n\n  const onItemClick = (id: string) => (): void => {\n    if (readonly) {\n      return;\n    }\n\n    if (onClick) {\n      onClick({ id });\n    }\n  };\n\n  const getColor = (): string => {\n    return selected === id ? contrastText : main;\n  };\n\n  const getBorder = (): string => {\n    return disabled ? 'none' : `1px solid ${main}`;\n  };\n\n  const getBackgroundColor = (): string => {\n    if (disabled) {\n      return action.disabled;\n    }\n\n    return selected === id ? main : 'transparent';\n  };\n\n  return (\n    <Box display='flex' flexDirection='column' alignItems='center' width={size + 20}>\n      <Box\n        onClick={onItemClick(id)}\n        sx={{\n          backgroundColor: getBackgroundColor(),\n          border: getBorder(),\n          color: getColor(),\n          height: size,\n          width: size,\n          borderRadius: '50%',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: (disabled || readonly) ? 'default' : 'pointer'\n        }}>\n        <Icon name={icon}></Icon>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ItemIcon;\n","import * as React from 'react';\nimport MuiAlert, { AlertColor } from '@mui/material/Alert';\nimport MuiSnackbar, { SnackbarProps as MuiSnackbarProps } from '@mui/material/Snackbar';\n\ntype SnackbarProps = {\n  open: boolean;\n  text: string;\n  type: AlertColor;\n  onClose: () => void;\n} & MuiSnackbarProps;\n\nconst Snackbar: React.FC<SnackbarProps> = ({ open = false, text, type, onClose, ...props }) => {\n\n  const onSnackbarClose = (): void => {\n    onClose();\n  };\n\n  return (\n    <MuiSnackbar\n      open={open}\n      autoHideDuration={5000}\n      onClose={onSnackbarClose}\n      {...props}\n    >\n      <MuiAlert severity={type}>\n        {text}\n      </MuiAlert>\n    </MuiSnackbar>\n  );\n};\n\nexport default Snackbar;\n"],"names":["_ref","data","onClick","palette","primary","main","contrastText","useTheme","name","icon","balance","_jsx","Paper","elevation","sx","paddingX","backgroundColor","children","_jsxs","Grid","container","display","alignItems","justifyContent","flexGrow","columnSpacing","borderRadius","minHeight","cursor","onAccountClick","item","xs","Icon","fontSize","sm","color","Typography","noWrap","Balance","positiveColor","props","info","navigate","useNavigate","t","useTranslation","Box","flexDirection","paddingBottom","borderBottom","theme","concat","secondary","marginBottom","marginRight","gap","Button","variant","startIcon","IconType","width","openAccountTransferPage","ROUTES","openTransferListPage","AccountList","dispatch","useAppDispatch","accounts","status","useAppSelector","selectAccount","balanceStatus","selectSummary","handleAccountItemClick","id","state","React","getAccounts","getBalance","TransferButtons","marginTop","PageTitle","text","rowGap","Skeleton","type","length","_Fragment","map","account","Account","nameKey","EmptyState","IconButton","openNewAccountPage","alignSelf","mode","regex","NUMERIC_REGEX","currencies","CURRENCIES","icons","ACCOUNT_ICONS_LIST","useLocation","getStatus","createEditStatus","deleteStatus","error","selectAccountError","selectCurrentAccount","defaultCurrency","iso","selectSettings","helper","accountHelper","formSubmitted","setFormSubmitted","deleteClicked","setDeleteClicked","showSnackbar","setShowSnackbar","dialogOpened","setDialogOpened","loading","deleteLoading","accountId","accountName","isCreateMode","ManageMode","isEditMode","isViewMode","title","getPageTitle","defaultValues","currencyIso","methods","useForm","reValidateMode","setValue","handleSubmit","watch","reset","watchCurrency","AccountField","handleAccountIconClick","_ref2","shouldValidate","handleCurrencyChange","event","target","value","handleFormSubmit","mappedData","Number","editAccount","createAccount","setFormValues","mapCurrencyStringToInputString","resetAccount","resetGetAccountStatus","goBack","setGetAccountErrorStatus","getAccount","component","onSubmit","withBackButton","withEditButton","withDeleteButton","withCancelButton","onBackButtonClick","onEditButtonClick","handleEditButtonClick","onDeleteButtonClick","handleOpenDialog","onCancelButtonClick","handleCancelButtonClick","FormProvider","FormInput","InputProps","readOnly","label","rules","required","message","pattern","FormSelect","inputProps","onChange","_ref3","symbol","MenuItem","FormIcon","render","_ref4","field","columnGap","_ref5","ItemIcon","selected","size","readonly","fullWidth","Snackbar","open","messageKey","onClose","handleSnackbarClose","Dialog","maxWidth","actionButtonText","handleCloseDialog","onAction","handleDeleteAccount","deleteAccount","Accounts","Routes","Route","path","element","CreateEditAccount","Navigate","to","replace","textValue","control","formState","errors","useFormContext","Controller","_fieldState$error","fieldState","InputLabel","FormHelperText","disabled","action","onItemClick","border","height","MuiSnackbar","autoHideDuration","onSnackbarClose","MuiAlert","severity"],"sourceRoot":""}