{"version":3,"file":"static/js/291.6d2aabae.chunk.js","mappings":"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","sources":["modules/Categories/pages/CategoryList.tsx","modules/Categories/pages/CreateEditCategory.tsx","modules/Categories/Categories.tsx","shared/components/ItemIcon.tsx","shared/components/Tabs.styles.ts","shared/components/Tabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Box from '@mui/system/Box';\nimport Grid from '@mui/material/Grid';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getCategories, selectCategory } from 'store/reducers';\nimport { Category, CategoryType, IconType, Option } from 'shared/models';\nimport { ROUTES, TABS } from 'shared/constants';\nimport Tabs from 'shared/components/Tabs';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport CategoryIcon from 'shared/components/CategoryIcon';\nimport EmptyState from 'shared/components/EmptyState';\n\nconst CategoryList: React.FC<{}> = () => {\n  const tabs = TABS;\n  const dispatch = useAppDispatch();\n  const { categories, status } = useAppSelector(selectCategory);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const [categoryType, setCategoryType] = React.useState<Option['value']>(String(CategoryType.expense));\n\n  const addIconData: Category = {\n    id: '',\n    name: 'New category',\n    nameKey: 'CATEGORIES.NEW_CATEGORY',\n    icon: IconType.plus,\n    type: Number(categoryType)\n  };\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getCategories());\n    }\n  }, [dispatch, status]);\n\n  const handleTabChange = (event: React.SyntheticEvent, value: Option['value']): void => {\n    setCategoryType(value);\n  };\n\n  const handleCategoryIconClick = ({ id, name }: Category): void => {\n    navigate(`${ROUTES.categories.path}/view/${name}`, { state: { id } });\n  };\n\n  const openNewCategoryPage = (): void => {\n    navigate(`${ROUTES.categories.path}/new`, { state: { categoryType } });\n  };\n\n  const getCategoryData = (data: Category): Category => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name\n    };\n  };\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='circular' />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !categories?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('CATEGORIES.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {categories\n          .filter(({ type }) => String(type) === categoryType)\n          .map((category) => (\n            <Grid item key={category.id}>\n              <CategoryIcon data={getCategoryData(category)} onItemClick={handleCategoryIconClick} />\n            </Grid>\n          ))}\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle text={t('CATEGORIES.PAGE_TITLE')} />\n      <Tabs centered defaultValue={categoryType} tabs={tabs} onChange={handleTabChange} sx={{ marginBottom: 3 }} />\n      <Grid container columnGap={4} rowGap={4} sx={{ marginTop: 4 }}>\n        {renderContent()}\n        <Grid item>\n          <CategoryIcon data={getCategoryData(addIconData)} onItemClick={openNewCategoryPage} />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CategoryList;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  createCategory,\n  editCategory,\n  getCategory,\n  selectCategory,\n  selectCurrentCategory,\n  resetGetCategoryStatus,\n  selectCategoryError,\n  deleteCategory,\n  setGetCategoryErrorStatus\n} from 'store/reducers';\nimport { CATEGORY_ICONS_LIST, TABS, ROUTES } from 'shared/constants';\nimport { Category, CategoryDTO, CategoryField, CategoryType, IconType, ManageMode } from 'shared/models';\nimport { categoryHelper, getPageTitle, mapCategoryTypesWithTranslations } from 'shared/helpers';\nimport PageTitle from 'shared/components/PageTitle';\nimport Button from 'shared/components/Button';\nimport FormInput from 'shared/components/FormInput';\nimport Snackbar from 'shared/components/Snackbar';\nimport ItemIcon from 'shared/components/ItemIcon';\nimport FormRadioGroup from 'shared/components/FormRadioGroup';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport FormIcon from 'shared/components/FormIcon';\n\ninterface NewCategoryProps {\n  mode: ManageMode;\n}\n\nconst CreateEditCategory: React.FC<NewCategoryProps> = ({ mode }) => {\n  const tabs = TABS;\n  const icons = CATEGORY_ICONS_LIST;\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const dispatch = useAppDispatch();\n  const { getStatus, createEditStatus, deleteStatus } = useAppSelector(selectCategory);\n  const error = useAppSelector(selectCategoryError);\n  const category = useAppSelector(selectCurrentCategory);\n  const { palette: { info: { contrastText } } } = useTheme();\n  const helper = categoryHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = createEditStatus === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const categoryId = state?.id as CategoryDTO['id'];\n  const categoryName = category?.nameKey ? t(category.nameKey) : (category?.name || '');\n  const categoryType = state?.categoryType as CategoryType;\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n  const title = getPageTitle<Category>(mode, t, getStatus, 'CATEGORIES', 'NEW_CATEGORY', 'EMPTY_TITLE', category);\n\n  const defaultValues: Partial<Category> = {\n    type: String(categoryType) as unknown as number,\n    name: '',\n  };\n\n  const methods = useForm<Category>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { setValue, handleSubmit, watch, reset } = methods;\n  const watchType = Number(watch(CategoryField.type));\n\n  const handleAccountIconClick = ({ id }: { id: string }): void => {\n    if (isViewMode) {\n      return;\n    }\n\n    setValue(CategoryField.icon, id as IconType, { shouldValidate: true });\n  };\n\n  const handleCategoryTypeChange = (value: string): void => {\n    const type = Number(value) as CategoryType;\n\n    setValue(CategoryField.type, type, { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Category): void => {\n    isEditMode ? dispatch(editCategory([categoryId, data])) : dispatch(createCategory(data));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isEditMode\n      ? navigate(`${ROUTES.categories.path}/view/${categoryName}`, { state: { id: categoryId } })\n      : navigate(ROUTES.categories.path);\n  };\n\n  const handleDeleteCategory = (): void => {\n    dispatch(deleteCategory(categoryId));\n    setDeleteClicked(true);\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.categories.path}/edit/${categoryName}`, { state: { id: categoryId } });\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (category) {\n      setValue(CategoryField.type, String(category.type) as unknown as number);\n      setValue(CategoryField.name, category.nameKey ? t(category.nameKey) : category.name);\n      setValue(CategoryField.icon, category.icon);\n    }\n  }, [category, setValue, t]);\n\n  const resetCategory = React.useCallback(() => {\n    dispatch(resetGetCategoryStatus());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    navigate(`${ROUTES.categories.path}`);\n    resetCategory();\n  }, [navigate, resetCategory]);\n\n  React.useEffect(() => {\n    if (createEditStatus === 'succeeded' && formSubmitted) {\n      goBack();\n      setShowSnackbar(false);\n    }\n\n    if (createEditStatus === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [goBack, createEditStatus, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (!categoryId) {\n      dispatch(setGetCategoryErrorStatus());\n    }\n  }, [categoryId, dispatch]);\n\n  React.useEffect(() => {\n    if (categoryId && getStatus === 'idle' && (isEditMode || isViewMode) && !deleteClicked) {\n      dispatch(getCategory(categoryId));\n    }\n  }, [categoryId, isEditMode, isViewMode, getStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetCategory();\n    };\n  }, [resetCategory]);\n\n  const renderContent = (): React.ReactElement => {\n    if (getStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!category || !categoryId) && getStatus === 'failed') {\n      return <EmptyState text={t('CATEGORIES.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={5}>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.NAME')}\n              name={CategoryField.name}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.name.required!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color={contrastText} sx={{ marginY: 1 }}>{t('COMMON.TYPE')}</Typography>\n            <FormRadioGroup\n              readonly={isViewMode}\n              name={CategoryField.type}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.type.required!.message)\n                }\n              }}\n              options={mapCategoryTypesWithTranslations(tabs, t)}\n              labelColor={contrastText}\n              value={watchType}\n              onRadioChange={handleCategoryTypeChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormIcon\n              name={CategoryField.icon}\n              label={t('COMMON.ICON')}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.icon.required!.message)\n                }\n              }}\n              render={({ field }) => (\n                <Grid container {...field} columnGap={1} rowGap={3} sx={{ marginTop: 2 }}>\n                  {\n                    icons.map(({ name }) => (\n                      <Grid item key={name}>\n                        <ItemIcon selected={field.value} id={name} icon={name} size={50} readonly={isViewMode} onClick={handleAccountIconClick} />\n                      </Grid>\n                    ))\n                  }\n                </Grid>\n              )} />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode && !!category}\n        withDeleteButton={isEditMode && !!category}\n        withCancelButton={!isViewMode && !!category}\n        text={title}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4, marginBottom: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save category' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' text={error?.messageKey ? t(error.messageKey) : error?.message || ''} open={showSnackbar} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('CATEGORIES.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteCategory}\n      >\n        <Typography variant='subtitle1'>\n          {t('CATEGORIES.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditCategory;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport CategoryList from './pages/CategoryList';\nimport CreateEditCategory from './pages/CreateEditCategory';\n\nconst Categories: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<CategoryList />} />\n      <Route path='/new' element={<CreateEditCategory mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditCategory mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditCategory mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.categories.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Categories;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport { IconType } from 'shared/models';\nimport Icon from 'shared/components/Icon';\n\ninterface ItemIconProps {\n  id: string;\n  icon: IconType;\n  selected?: string;\n  size?: number;\n  disabled?: boolean;\n  readonly?: boolean;\n  onClick?: ({ id }: { id: string }) => void;\n}\n\nconst ItemIcon: React.FC<ItemIconProps> = ({ id, selected, icon, size = 64, disabled, readonly, onClick }) => {\n  const { palette: { primary: { main, contrastText }, action } } = useTheme();\n\n  const onItemClick = (id: string) => (): void => {\n    if (readonly) {\n      return;\n    }\n\n    if (onClick) {\n      onClick({ id });\n    }\n  };\n\n  const getColor = (): string => {\n    return selected === id ? contrastText : main;\n  };\n\n  const getBorder = (): string => {\n    return disabled ? 'none' : `1px solid ${main}`;\n  };\n\n  const getBackgroundColor = (): string => {\n    if (disabled) {\n      return action.disabled;\n    }\n\n    return selected === id ? main : 'transparent';\n  };\n\n  return (\n    <Box display='flex' flexDirection='column' alignItems='center' width={size + 20}>\n      <Box\n        onClick={onItemClick(id)}\n        sx={{\n          backgroundColor: getBackgroundColor(),\n          border: getBorder(),\n          color: getColor(),\n          height: size,\n          width: size,\n          borderRadius: '50%',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: (disabled || readonly) ? 'default' : 'pointer'\n        }}>\n        <Icon name={icon}></Icon>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ItemIcon;\n","import styled from '@emotion/styled';\nimport Tabs from '@mui/material/Tabs';\n\nexport const StyledTabs = styled(Tabs)({\n  '&.MuiTabs-root': {\n  }\n});\n","import * as React from 'react';\nimport { TabsProps as MuiTabsProps } from '@mui/material/Tabs';\nimport MuiTab from '@mui/material/Tab';\nimport { useTranslation } from 'core/i18n';\nimport { Option } from 'shared/models';\nimport { StyledTabs } from './Tabs.styles';\n\ntype TabsProps = {\n  tabs: Option[];\n  defaultValue?: Option['value'];\n  onChange: (event: React.SyntheticEvent, value: Option['value']) => void;\n} & MuiTabsProps;\n\nconst Tabs: React.FC<TabsProps> = ({ tabs, defaultValue = '0', onChange, ...props }) => {\n  const { t } = useTranslation();\n  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);\n\n  const onValueChange = (event: React.SyntheticEvent, selectedValue: Option['value']): void => {\n    setSelectedValue(selectedValue);\n    onChange(event, selectedValue);\n  };\n\n  return (\n    <StyledTabs {...props} value={selectedValue} onChange={onValueChange}>\n      {\n        tabs.map(({ value, label }) => (\n          <MuiTab value={value} key={value} label={t(label)} />\n        ))\n      }\n    </StyledTabs>\n  );\n};\n\nexport default Tabs;\n"],"names":["tabs","TABS","dispatch","useAppDispatch","_useAppSelector","useAppSelector","selectCategory","categories","status","navigate","useNavigate","t","useTranslation","_React$useState","React","String","CategoryType","_React$useState2","_slicedToArray","categoryType","setCategoryType","addIconData","id","name","nameKey","icon","IconType","type","Number","getCategories","handleCategoryIconClick","_ref","concat","ROUTES","state","getCategoryData","data","_objectSpread","_jsxs","Box","flexGrow","children","_jsx","PageTitle","text","Tabs","centered","defaultValue","onChange","event","value","sx","marginBottom","Grid","container","columnGap","rowGap","marginTop","item","xs","Skeleton","length","_Fragment","filter","_ref2","map","category","CategoryIcon","onItemClick","EmptyState","mode","icons","CATEGORY_ICONS_LIST","useLocation","getStatus","createEditStatus","deleteStatus","error","selectCategoryError","selectCurrentCategory","contrastText","useTheme","palette","info","helper","categoryHelper","formSubmitted","setFormSubmitted","_React$useState3","_React$useState4","deleteClicked","setDeleteClicked","_React$useState5","_React$useState6","showSnackbar","setShowSnackbar","_React$useState7","_React$useState8","dialogOpened","setDialogOpened","loading","deleteLoading","categoryId","categoryName","isCreateMode","ManageMode","isEditMode","isViewMode","title","getPageTitle","defaultValues","methods","useForm","reValidateMode","setValue","handleSubmit","watch","reset","watchType","CategoryField","handleAccountIconClick","shouldValidate","handleCategoryTypeChange","handleFormSubmit","editCategory","createCategory","setFormValues","resetCategory","resetGetCategoryStatus","goBack","setGetCategoryErrorStatus","getCategory","component","display","flexDirection","onSubmit","withBackButton","withEditButton","withDeleteButton","withCancelButton","onBackButtonClick","onEditButtonClick","onDeleteButtonClick","onCancelButtonClick","FormProvider","FormInput","InputProps","readOnly","label","rules","required","message","Typography","color","marginY","FormRadioGroup","readonly","options","mapCategoryTypesWithTranslations","labelColor","onRadioChange","FormIcon","render","_ref3","field","_ref4","ItemIcon","selected","size","onClick","justifyContent","sm","Button","fullWidth","variant","Snackbar","messageKey","open","onClose","Dialog","maxWidth","actionButtonText","onAction","deleteCategory","Routes","Route","path","element","CategoryList","CreateEditCategory","Navigate","to","replace","_ref$size","disabled","_useTheme$palette","_useTheme$palette$pri","primary","main","action","alignItems","width","backgroundColor","border","height","borderRadius","cursor","Icon","StyledTabs","styled","_ref$defaultValue","props","_objectWithoutProperties","_excluded","selectedValue","setSelectedValue","MuiTab"],"sourceRoot":""}