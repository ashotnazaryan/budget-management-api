{"version":3,"file":"static/js/291.fc84051c.chunk.js","mappings":"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","sources":["modules/Categories/pages/CategoryList.tsx","modules/Categories/pages/CreateEditCategory.tsx","modules/Categories/Categories.tsx","shared/components/ItemIcon.tsx","shared/components/Tabs.styles.ts","shared/components/Tabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Box from '@mui/system/Box';\nimport Grid from '@mui/material/Grid';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getCategories, selectCategory } from 'store/reducers';\nimport { Category, CategoryType, IconType, Option } from 'shared/models';\nimport { ROUTES, TABS } from 'shared/constants';\nimport Tabs from 'shared/components/Tabs';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport CategoryIcon from 'shared/components/CategoryIcon';\nimport EmptyState from 'shared/components/EmptyState';\n\nconst CategoryList: React.FC<{}> = () => {\n  const tabs = TABS;\n  const dispatch = useAppDispatch();\n  const { categories, status } = useAppSelector(selectCategory);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const [categoryType, setCategoryType] = React.useState<Option['value']>(String(CategoryType.expense));\n\n  const addIconData: Category = {\n    id: '',\n    name: 'New category',\n    nameKey: 'CATEGORIES.NEW_CATEGORY',\n    icon: IconType.plus,\n    type: Number(categoryType)\n  };\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getCategories());\n    }\n  }, [dispatch, status]);\n\n  const handleTabChange = (event: React.SyntheticEvent, value: Option['value']): void => {\n    setCategoryType(value);\n  };\n\n  const handleCategoryIconClick = ({ id, name }: Category): void => {\n    navigate(`${ROUTES.categories.path}/view/${name}`, { state: { id } });\n  };\n\n  const openNewCategoryPage = (): void => {\n    navigate(`${ROUTES.categories.path}/new`, { state: { categoryType } });\n  };\n\n  const getCategoryData = (data: Category): Category => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name\n    };\n  };\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='circular' sx={{ marginTop: 1 }} />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !categories?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('CATEGORIES.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {categories\n          .filter(({ type }) => String(type) === categoryType)\n          .map((category) => (\n            <Grid item key={category.id}>\n              <CategoryIcon data={getCategoryData(category)} onItemClick={handleCategoryIconClick} />\n            </Grid>\n          ))}\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle text={t('CATEGORIES.PAGE_TITLE')} />\n      <Tabs centered defaultValue={categoryType} tabs={tabs} onChange={handleTabChange} sx={{ marginBottom: 3 }} />\n      <Grid container columnGap={4} rowGap={4} sx={{ marginTop: 4 }}>\n        {renderContent()}\n        <Grid item>\n          <CategoryIcon data={getCategoryData(addIconData)} onItemClick={openNewCategoryPage} />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CategoryList;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Controller, FormProvider, useForm } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { useTheme } from '@mui/material/styles';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  createCategory,\n  editCategory,\n  getCategory,\n  selectCategory,\n  selectCurrentCategory,\n  resetCurrentCategory,\n  selectCategoryError,\n  deleteCategory\n} from 'store/reducers';\nimport { CATEGORY_ICONS_LIST, TABS, ROUTES } from 'shared/constants';\nimport { Category, CategoryDTO, CategoryField, CategoryType, IconType, ManageMode } from 'shared/models';\nimport { categoryHelper, mapCategoryTypesWithTranslations } from 'shared/helpers';\nimport PageTitle from 'shared/components/PageTitle';\nimport Button from 'shared/components/Button';\nimport FormInput from 'shared/components/FormInput';\nimport Snackbar from 'shared/components/Snackbar';\nimport ItemIcon from 'shared/components/ItemIcon';\nimport FormRadioGroup from 'shared/components/FormRadioGroup';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\n\ninterface NewCategoryProps {\n  mode: ManageMode;\n}\n\nconst CreateEditCategory: React.FC<NewCategoryProps> = ({ mode }) => {\n  const tabs = TABS;\n  const icons = CATEGORY_ICONS_LIST;\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const dispatch = useAppDispatch();\n  const { status, deleteStatus, currentStatus } = useAppSelector(selectCategory);\n  const error = useAppSelector(selectCategoryError);\n  const category = useAppSelector(selectCurrentCategory);\n  const { palette: { info: { contrastText } } } = useTheme();\n  const helper = categoryHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = status === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const categoryId = state?.id as CategoryDTO['id'];\n  const categoryName = category?.nameKey ? t(category.nameKey) : (category?.name || '');\n  const categoryType = state?.categoryType as CategoryType;\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n\n  const defaultValues: Partial<Category> = {\n    type: String(categoryType) as unknown as number,\n    name: '',\n  };\n\n  const methods = useForm<Category>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { setValue, handleSubmit, control, watch, reset } = methods;\n  const watchType = Number(watch(CategoryField.type));\n\n  const handleAccountIconClick = ({ id }: { id: string }): void => {\n    if (isViewMode) {\n      return;\n    }\n\n    setValue(CategoryField.icon, id as IconType, { shouldValidate: true });\n  };\n\n  const handleCategoryTypeChange = (value: string): void => {\n    const type = Number(value) as CategoryType;\n\n    setValue(CategoryField.type, type, { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Category): void => {\n    isEditMode ? dispatch(editCategory([categoryId, data])) : dispatch(createCategory(data));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isEditMode\n      ? navigate(`${ROUTES.categories.path}/view/${categoryName}`, { state: { id: categoryId } })\n      : navigate(ROUTES.categories.path);\n  };\n\n  const handleDeleteCategory = (): void => {\n    dispatch(deleteCategory(categoryId));\n    setDeleteClicked(true);\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const getTitle = (): string => {\n    if (isCreateMode) {\n      return t('CATEGORIES.NEW_CATEGORY');\n    }\n\n    if (category && (isEditMode || isViewMode)) {\n      return categoryName;\n    }\n\n    if (currentStatus !== 'loading') {\n      return t('CATEGORIES.EMPTY_TITLE');\n    }\n\n    return '';\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.categories.path}/edit/${categoryName}`, { state: { id: categoryId } });\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (category) {\n      setValue(CategoryField.type, String(category.type) as unknown as number);\n      setValue(CategoryField.name, category.nameKey ? t(category.nameKey) : category.name);\n      setValue(CategoryField.icon, category.icon);\n    }\n  }, [category, setValue, t]);\n\n  const resetCategory = React.useCallback(() => {\n    dispatch(resetCurrentCategory());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    navigate(`${ROUTES.categories.path}`);\n    resetCategory();\n  }, [navigate, resetCategory]);\n\n  React.useEffect(() => {\n    if (status === 'succeeded' && formSubmitted) {\n      goBack();\n      setShowSnackbar(false);\n    }\n\n    if (status === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [goBack, status, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (categoryId && currentStatus === 'idle' && (isEditMode || isViewMode) && !deleteClicked) {\n      dispatch(getCategory(categoryId));\n    }\n  }, [categoryId, isEditMode, isViewMode, currentStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetCategory();\n    };\n  }, [resetCategory]);\n\n  const renderContent = (): React.ReactElement => {\n    if (currentStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!category || !categoryId)) {\n      return <EmptyState text={t('CATEGORIES.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={5}>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.NAME')}\n              name={CategoryField.name}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.name.required!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color={contrastText} sx={{ marginY: 1 }}>{t('COMMON.TYPE')}</Typography>\n            <FormRadioGroup\n              readonly={isViewMode}\n              name={CategoryField.type}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.type.required!.message)\n                }\n              }}\n              options={mapCategoryTypesWithTranslations(tabs, t)}\n              labelColor={contrastText}\n              value={watchType}\n              onRadioChange={handleCategoryTypeChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color={contrastText} sx={{ marginY: 1 }}>{t('COMMON.ICON')}</Typography>\n            <Controller\n              control={control}\n              name={CategoryField.icon}\n              rules={{\n                required: true\n              }}\n              render={({ field, fieldState: { error } }) => (\n                <>\n                  <Grid container {...field} columnGap={1} rowGap={3} sx={{ marginTop: 2 }}>\n                    {\n                      icons.map(({ name }) => (\n                        <Grid item key={name}>\n                          <ItemIcon selected={field.value} id={name} icon={name} size={50} readonly={isViewMode} onClick={handleAccountIconClick} />\n                        </Grid>\n                      ))\n                    }\n                  </Grid>\n                  {error && <FormHelperText error>{t(helper.icon[error.type]!.message)}</FormHelperText>}\n                </>\n              )}\n            />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode && !!category}\n        withDeleteButton={isEditMode && !!category}\n        withCancelButton={!isViewMode && !!category}\n        text={getTitle()}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save category' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' text={error?.messageKey ? t(error.messageKey) : error?.message || ''} open={showSnackbar} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('CATEGORIES.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteCategory}\n      >\n        <Typography variant='subtitle1'>\n          {t('CATEGORIES.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box >\n  );\n};\n\nexport default CreateEditCategory;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport CategoryList from './pages/CategoryList';\nimport CreateEditCategory from './pages/CreateEditCategory';\n\nconst Categories: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<CategoryList />} />\n      <Route path='/new' element={<CreateEditCategory mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditCategory mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditCategory mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.categories.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Categories;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport { IconType } from 'shared/models';\nimport Icon from 'shared/components/Icon';\n\ninterface ItemIconProps {\n  id: string;\n  icon: IconType;\n  selected?: string;\n  size?: number;\n  disabled?: boolean;\n  readonly?: boolean;\n  onClick?: ({ id }: { id: string }) => void;\n}\n\nconst ItemIcon: React.FC<ItemIconProps> = ({ id, selected, icon, size = 64, disabled, readonly, onClick }) => {\n  const { palette: { primary: { main, contrastText }, action } } = useTheme();\n\n  const onItemClick = (id: string) => (): void => {\n    if (readonly) {\n      return;\n    }\n\n    if (onClick) {\n      onClick({ id });\n    }\n  };\n\n  const getColor = (): string => {\n    return selected === id ? contrastText : main;\n  };\n\n  const getBorder = (): string => {\n    return disabled ? 'none' : `1px solid ${main}`;\n  };\n\n  const getBackgroundColor = (): string => {\n    if (disabled) {\n      return action.disabled;\n    }\n\n    return selected === id ? main : 'transparent';\n  };\n\n  return (\n    <Box display='flex' flexDirection='column' alignItems='center' width={size + 20}>\n      <Box\n        onClick={onItemClick(id)}\n        sx={{\n          backgroundColor: getBackgroundColor(),\n          border: getBorder(),\n          color: getColor(),\n          height: size,\n          width: size,\n          borderRadius: '50%',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: (disabled || readonly) ? 'default' : 'pointer'\n        }}>\n        <Icon name={icon}></Icon>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ItemIcon;\n","import styled from '@emotion/styled';\nimport Tabs from '@mui/material/Tabs';\n\nexport const StyledTabs = styled(Tabs)({\n  '&.MuiTabs-root': {\n  }\n});\n","import * as React from 'react';\nimport { TabsProps as MuiTabsProps } from '@mui/material/Tabs';\nimport MuiTab from '@mui/material/Tab';\nimport { useTranslation } from 'core/i18n';\nimport { Option } from 'shared/models';\nimport { StyledTabs } from './Tabs.styles';\n\ntype TabsProps = {\n  tabs: Option[];\n  defaultValue?: Option['value'];\n  onChange: (event: React.SyntheticEvent, value: Option['value']) => void;\n} & MuiTabsProps;\n\nconst Tabs: React.FC<TabsProps> = ({ tabs, defaultValue = '0', onChange, ...props }) => {\n  const { t } = useTranslation();\n  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);\n\n  const onValueChange = (event: React.SyntheticEvent, selectedValue: Option['value']): void => {\n    setSelectedValue(selectedValue);\n    onChange(event, selectedValue);\n  };\n\n  return (\n    <StyledTabs {...props} value={selectedValue} onChange={onValueChange}>\n      {\n        tabs.map(({ value, label }) => (\n          <MuiTab value={value} key={value} label={t(label)} />\n        ))\n      }\n    </StyledTabs>\n  );\n};\n\nexport default Tabs;\n"],"names":["tabs","TABS","dispatch","useAppDispatch","_useAppSelector","useAppSelector","selectCategory","categories","status","navigate","useNavigate","t","useTranslation","_React$useState","React","String","CategoryType","_React$useState2","_slicedToArray","categoryType","setCategoryType","addIconData","id","name","nameKey","icon","IconType","type","Number","getCategories","handleCategoryIconClick","_ref","concat","ROUTES","state","getCategoryData","data","_objectSpread","_jsxs","Box","flexGrow","children","_jsx","PageTitle","text","Tabs","centered","defaultValue","onChange","event","value","sx","marginBottom","Grid","container","columnGap","rowGap","marginTop","item","xs","Skeleton","length","_Fragment","filter","_ref2","map","category","CategoryIcon","onItemClick","EmptyState","mode","icons","CATEGORY_ICONS_LIST","useLocation","deleteStatus","currentStatus","error","selectCategoryError","selectCurrentCategory","contrastText","useTheme","palette","info","helper","categoryHelper","formSubmitted","setFormSubmitted","_React$useState3","_React$useState4","deleteClicked","setDeleteClicked","_React$useState5","_React$useState6","showSnackbar","setShowSnackbar","_React$useState7","_React$useState8","dialogOpened","setDialogOpened","loading","deleteLoading","categoryId","categoryName","isCreateMode","ManageMode","isEditMode","isViewMode","defaultValues","methods","useForm","reValidateMode","setValue","handleSubmit","control","watch","reset","watchType","CategoryField","handleAccountIconClick","shouldValidate","handleCategoryTypeChange","handleFormSubmit","editCategory","createCategory","setFormValues","resetCategory","resetCurrentCategory","goBack","getCategory","component","display","flexDirection","onSubmit","withBackButton","withEditButton","withDeleteButton","withCancelButton","onBackButtonClick","onEditButtonClick","onDeleteButtonClick","onCancelButtonClick","FormProvider","FormInput","InputProps","readOnly","label","rules","required","message","Typography","color","marginY","FormRadioGroup","readonly","options","mapCategoryTypesWithTranslations","labelColor","onRadioChange","Controller","render","_ref3","field","fieldState","_ref4","ItemIcon","selected","size","onClick","FormHelperText","justifyContent","sm","Button","fullWidth","variant","Snackbar","messageKey","open","onClose","Dialog","maxWidth","title","actionButtonText","onAction","deleteCategory","Routes","Route","path","element","CategoryList","CreateEditCategory","Navigate","to","replace","_ref$size","disabled","_useTheme$palette","_useTheme$palette$pri","primary","main","action","alignItems","width","backgroundColor","border","height","borderRadius","cursor","Icon","StyledTabs","styled","_ref$defaultValue","props","_objectWithoutProperties","_excluded","selectedValue","setSelectedValue","MuiTab"],"sourceRoot":""}