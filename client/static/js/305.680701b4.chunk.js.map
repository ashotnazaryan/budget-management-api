{"version":3,"file":"static/js/305.680701b4.chunk.js","mappings":"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","sources":["modules/Transactions/components/Transaction.tsx","modules/Transactions/pages/TransactionList.tsx","modules/Transactions/pages/CreateEditTransaction.tsx","modules/Transactions/Transactions.tsx","shared/components/FormDatePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport date from 'core/date';\nimport { CategoryType, Transaction as TransactionModel } from 'shared/models';\nimport Icon from 'shared/components/Icon';\nimport { DATE_FORMAT } from 'shared/constants';\n\ninterface TransactionProps {\n  data: TransactionModel;\n  onClick?: (data: TransactionModel) => void;\n}\n\nconst Transaction: React.FC<TransactionProps> = ({ data, onClick }) => {\n  const { palette: { primary: { main, contrastText }, error } } = useTheme();\n  const { name, icon, accountName, accountIcon, createdAt, amount, type } = data;\n  const formattedCreatedAt = date(createdAt).format(DATE_FORMAT);\n\n  const onTransactionClick = (): void => {\n    if (onClick) {\n      onClick(data);\n    }\n  };\n\n  return (\n    <Paper elevation={1} sx={{ paddingX: 2, backgroundColor: main }} onClick={onTransactionClick}>\n      <Grid container columnSpacing={2} alignItems='center' sx={{ minHeight: 40, cursor: 'pointer' }}>\n        <Grid item xs={1} display='flex'>\n          {icon && <Icon name={icon} sx={{ color: contrastText, fontSize: { sm: 22, xs: 18 } }}></Icon>}\n        </Grid>\n        <Grid item xs={2.5}>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{name}</Typography>\n        </Grid>\n        <Grid item xs={2.5} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={type === CategoryType.expense ? error.main : contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{amount}</Typography>\n        </Grid>\n        <Grid item xs={2} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{accountName}</Typography>\n        </Grid>\n        <Grid item xs={1} display='flex'>\n          {accountIcon && <Icon name={accountIcon} color='primary' sx={{ fontSize: { sm: 22, xs: 18 }, color: contrastText }}></Icon>}\n        </Grid>\n        <Grid item xs={3} display='flex' justifyContent='flex-end'>\n          <Typography noWrap color={contrastText} sx={{ fontSize: { sm: 15, xs: 13 } }}>{formattedCreatedAt}</Typography>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Transaction;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/system/Box';\nimport { useTranslation } from 'core/i18n';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport { getTransactions, selectTransaction } from 'store/reducers';\nimport { Transaction as TransactionModel } from 'shared/models';\nimport { ROUTES } from 'shared/constants';\nimport Skeleton from 'shared/components/Skeleton';\nimport PageTitle from 'shared/components/PageTitle';\nimport EmptyState from 'shared/components/EmptyState';\nimport Transaction from '../components/Transaction';\n\nconst TransactionList: React.FC<{}> = () => {\n  const dispatch = useAppDispatch();\n  const { transactions, status } = useAppSelector(selectTransaction);\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const { t } = useTranslation();\n  const categoryId = state?.categoryId as TransactionModel['categoryId'];\n\n  React.useEffect(() => {\n    if (status === 'idle') {\n      dispatch(getTransactions(categoryId));\n    }\n  }, [dispatch, status, categoryId]);\n\n  const handleTransactionClick = ({ id, name }: TransactionModel): void => {\n    navigate(`${ROUTES.transactions.path}/view/${name}`, { state: { id } });\n  };\n\n  const getTransactionData = (data: TransactionModel): TransactionModel => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name,\n      accountName: data.accountNameKey ? t(data.accountNameKey) : data.accountName\n    };\n  };\n\n  const renderContent = (): React.ReactElement => {\n    if (status === 'loading') {\n      return (\n        <Grid item xs={12}>\n          <Skeleton type='list' />\n        </Grid>\n      );\n    }\n\n    if ((status === 'failed' || status === 'succeeded') && !transactions?.length) {\n      return (\n        <Grid item xs={12}>\n          <EmptyState text={t('TRANSACTIONS.EMPTY_TEXT')} />\n        </Grid>\n      );\n    }\n\n    return (\n      <>\n        {\n          transactions.map((transaction) => (\n            <Grid item key={transaction.id} xs={12}>\n              <Transaction data={getTransactionData(transaction)} onClick={handleTransactionClick} />\n            </Grid>\n          ))\n        }\n      </>\n    );\n  };\n\n  return (\n    <Box flexGrow={1}>\n      <PageTitle text={t('TRANSACTIONS.PAGE_TITLE')} />\n      <Grid container rowGap={2}>\n        {renderContent()}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TransactionList;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport date, { LocalizedDate } from 'core/date';\nimport { useTranslation } from 'core/i18n';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useTheme } from '@mui/material/styles';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  getCategories,\n  selectCategory,\n  addTransaction,\n  selectTransaction,\n  selectAccount,\n  getAccounts,\n  selectSettings,\n  selectCurrentTransaction,\n  getTransaction,\n  editTransaction,\n  selectCategoryStatus,\n  selectAccountStatus,\n  deleteTransaction,\n  selectTransactionError,\n  resetGetTransactionStatus,\n  setGetTransactionErrorStatus\n} from 'store/reducers';\nimport { CategoryType, Category as CategoryModel, TransactionField, TransactionDTO, Account, ManageMode, Transaction, IconType } from 'shared/models';\nimport { TABS, POSITIVE_NUMERIC_REGEX, ROUTES } from 'shared/constants';\nimport { getAccountLabel, getPageTitle, mapCategoryTypesWithTranslations, mapCurrencyStringToInputString, transactionHelper } from 'shared/helpers';\nimport FormInput from 'shared/components/FormInput';\nimport Button from 'shared/components/Button';\nimport Snackbar from 'shared/components/Snackbar';\nimport PageTitle from 'shared/components/PageTitle';\nimport CategoryIcon from 'shared/components/CategoryIcon';\nimport FormDatePicker from 'shared/components/FormDatePicker';\nimport FormSelect from 'shared/components/FormSelect';\nimport FormRadioGroup from 'shared/components/FormRadioGroup';\nimport Dialog from 'shared/components/Dialog';\nimport Skeleton from 'shared/components/Skeleton';\nimport EmptyState from 'shared/components/EmptyState';\nimport AccountOption from 'shared/components/AccountOption';\nimport FormIcon from 'shared/components/FormIcon';\n\ninterface CreateEditTransactionProps {\n  mode: ManageMode;\n}\n\nconst CreateEditTransaction: React.FC<CreateEditTransactionProps> = ({ mode }) => {\n  const regex = POSITIVE_NUMERIC_REGEX;\n  const tabs = TABS;\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const { categories } = useAppSelector(selectCategory);\n  const categoryStatus = useAppSelector(selectCategoryStatus);\n  const { getStatus, createEditStatus, deleteStatus } = useAppSelector(selectTransaction);\n  const error = useAppSelector(selectTransactionError);\n  const { accounts } = useAppSelector(selectAccount);\n  const accountStatus = useAppSelector(selectAccountStatus);\n  const { defaultAccount = '' } = useAppSelector(selectSettings);\n  const transaction = useAppSelector(selectCurrentTransaction);\n  const { palette: { info: { contrastText } } } = useTheme();\n  const helper = transactionHelper();\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = React.useState<boolean>(false);\n  const [deleteClicked, setDeleteClicked] = React.useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = React.useState<boolean>(false);\n  const [dialogOpened, setDialogOpened] = React.useState<boolean>(false);\n  const loading = createEditStatus === 'loading';\n  const deleteLoading = deleteStatus === 'loading';\n  const transactionId = state?.id as TransactionDTO['id'];\n  const transactionName = transaction?.nameKey ? t(transaction.nameKey) : (transaction?.name || '');\n  const categoryType = state?.categoryType as CategoryType || CategoryType.expense;\n  const isCreateMode = mode === ManageMode.create;\n  const isEditMode = mode === ManageMode.edit;\n  const isViewMode = mode === ManageMode.view;\n  const title = getPageTitle<Transaction>(mode, t, getStatus, 'TRANSACTIONS', 'NEW_TRANSACTION', 'EMPTY_TITLE', transaction);\n\n  const defaultValues: Partial<Transaction> = {\n    amount: '',\n    categoryId: '',\n    accountId: defaultAccount || '',\n    type: String(categoryType) as unknown as number,\n    createdAt: isCreateMode ? date().format() : undefined,\n    note: ''\n  };\n\n  const methods = useForm<Transaction>({\n    mode: 'onBlur',\n    reValidateMode: 'onBlur',\n    defaultValues\n  });\n\n  const { setValue, handleSubmit, watch, reset } = methods;\n  const watchType = watch(TransactionField.type);\n  const watchAccount = watch(TransactionField.accountId);\n  const watchCreatedAt = watch(TransactionField.createdAt);\n\n  const getCategoryData = (data: CategoryModel): CategoryModel => {\n    return {\n      ...data,\n      name: data.nameKey ? t(data.nameKey) : data.name\n    };\n  };\n\n  const handleCategoryTypeChange = (value: string): void => {\n    const type = Number(value) as CategoryType;\n\n    setValue(TransactionField.type, type, { shouldValidate: true });\n    setValue(TransactionField.categoryId, defaultValues.categoryId as string);\n    setValue(TransactionField.icon, defaultValues.icon as IconType);\n    setValue(TransactionField.name, defaultValues.name as string);\n  };\n\n  const handleCategoryIconClick = ({ id, name, nameKey, icon }: CategoryModel): void => {\n    if (isViewMode) {\n      return;\n    }\n\n    setValue(TransactionField.categoryId, id, { shouldValidate: true });\n    setValue(TransactionField.icon, icon);\n    setValue(TransactionField.name, name, { shouldValidate: true });\n    setValue('nameKey', nameKey);\n  };\n\n  const handleAccountChange = (event: SelectChangeEvent<Account['id']>): void => {\n    setValue(TransactionField.accountId, event.target.value, { shouldValidate: true });\n  };\n\n  const handleDatePickerChange = (value: LocalizedDate | null): void => {\n    setValue(TransactionField.createdAt, value!.format(), { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: Transaction): void => {\n    const mappedData: Omit<TransactionDTO, 'percentValue'> = {\n      ...data,\n      amount: Number(data.amount),\n      type: Number(data.type),\n      createdAt: date(data.createdAt).toDate()\n    };\n\n    isEditMode\n      ? dispatch(editTransaction([transactionId, mappedData]))\n      : dispatch(addTransaction(mappedData));\n    setFormSubmitted(true);\n  };\n\n  const handleCancelButtonClick = (): void => {\n    isCreateMode ? reset(defaultValues) : setFormValues();\n\n    isCreateMode\n      ? navigate(ROUTES.dashboard.path)\n      : navigate(`${ROUTES.transactions.path}/view/${transactionName}`, { state: { id: transactionId } });\n  };\n\n  const handleDeleteTransaction = (): void => {\n    dispatch(deleteTransaction(transactionId));\n    setDeleteClicked(true);\n  };\n\n  const handleOpenDialog = (): void => {\n    setDialogOpened(true);\n  };\n\n  const handleCloseDialog = (): void => {\n    setDialogOpened(false);\n  };\n\n  const handleSnackbarClose = (): void => {\n    setShowSnackbar(false);\n    setDeleteClicked(false);\n  };\n\n  const handleEditButtonClick = (): void => {\n    if (isEditMode) {\n      return;\n    }\n\n    navigate(`${ROUTES.transactions.path}/edit/${transactionName}`, { state: { id: transactionId } });\n  };\n\n  const setFormValues = React.useCallback(() => {\n    if (transaction) {\n      setValue(TransactionField.categoryId, transaction.categoryId);\n      setValue(TransactionField.accountId, transaction.accountId);\n      setValue(TransactionField.icon, transaction.icon);\n      setValue(TransactionField.amount, mapCurrencyStringToInputString(transaction.amount));\n      setValue(TransactionField.type, String(transaction.type) as unknown as number);\n      setValue(TransactionField.createdAt, transaction.createdAt);\n      setValue(TransactionField.note, transaction.note);\n      setValue('name', transaction.name);\n    }\n  }, [transaction, setValue]);\n\n  const resetTransaction = React.useCallback(() => {\n    dispatch(resetGetTransactionStatus());\n  }, [dispatch]);\n\n  const goBack = React.useCallback(() => {\n    navigate(`${isCreateMode ? ROUTES.dashboard.path : ROUTES.transactions.path}`);\n    resetTransaction();\n  }, [navigate, resetTransaction, isCreateMode]);\n\n  React.useEffect(() => {\n    if (categoryStatus === 'idle') {\n      dispatch(getCategories());\n    }\n\n    if (accountStatus === 'idle') {\n      dispatch(getAccounts());\n    }\n  }, [dispatch, categoryStatus, accountStatus]);\n\n  React.useEffect(() => {\n    if (createEditStatus === 'succeeded' && formSubmitted) {\n      goBack();\n      setShowSnackbar(false);\n      dispatch(getAccounts());\n    }\n\n    if (createEditStatus === 'failed' && formSubmitted) {\n      setShowSnackbar(true);\n    }\n  }, [dispatch, goBack, createEditStatus, formSubmitted]);\n\n  React.useEffect(() => {\n    if (deleteStatus === 'succeeded' && deleteClicked) {\n      goBack();\n    }\n\n    if (deleteStatus === 'failed' && deleteClicked) {\n      setShowSnackbar(true);\n      setDialogOpened(false);\n    }\n  }, [goBack, deleteStatus, deleteClicked]);\n\n  React.useEffect(() => {\n    if (!transactionId) {\n      dispatch(setGetTransactionErrorStatus());\n    }\n  }, [transactionId, dispatch]);\n\n  React.useEffect(() => {\n    if (transactionId && getStatus === 'idle' && !isCreateMode && !deleteClicked) {\n      dispatch(getTransaction(transactionId));\n    }\n  }, [transactionId, isCreateMode, getStatus, dispatch, deleteClicked]);\n\n  React.useEffect(() => {\n    setValue(TransactionField.accountId, defaultAccount);\n  }, [setValue, defaultAccount]);\n\n  React.useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  React.useEffect(() => {\n    return () => {\n      resetTransaction();\n    };\n  }, [resetTransaction]);\n\n  const renderContent = (): React.ReactElement => {\n    if (getStatus === 'loading') {\n      return <Skeleton type='form' />;\n    }\n\n    if (!isCreateMode && (!transaction || !transactionId) && getStatus === 'failed') {\n      return <EmptyState text={t('TRANSACTIONS.EMPTY_TEXT_RENDER_CONTENT')} />;\n    }\n\n    return (\n      <FormProvider {...methods}>\n        <Grid container rowGap={7}>\n          <Grid item xs={12}>\n            <Typography color={contrastText}>{t('COMMON.TYPE')}</Typography>\n            <FormRadioGroup\n              readonly={isViewMode}\n              name={TransactionField.type}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.type.required!.message)\n                }\n              }}\n              options={mapCategoryTypesWithTranslations(tabs, t)}\n              labelColor={contrastText}\n              value={watchType}\n              onRadioChange={handleCategoryTypeChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              InputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.AMOUNT')}\n              type='number'\n              name={TransactionField.amount}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.amount.required!.message)\n                },\n                pattern: {\n                  value: regex,\n                  message: t(helper.amount.pattern!.message)\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormSelect\n              inputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.ACCOUNT')}\n              name={TransactionField.accountId}\n              value={accounts.length ? (watchAccount || defaultAccount) : ''}\n              onChange={handleAccountChange}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.accountId.required!.message)\n                }\n              }}\n              renderValue={(value) => (\n                <Typography>{getAccountLabel(value, accounts, t)}</Typography>\n              )}\n            >\n              {accounts.map((account) => (\n                <MenuItem key={account.id} value={account.id} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <AccountOption data={account} />\n                </MenuItem>\n              ))}\n            </FormSelect>\n          </Grid>\n          <Grid item xs={12}>\n            <FormDatePicker\n              readOnly={isViewMode}\n              name={TransactionField.createdAt}\n              label={t('COMMON.DATE')}\n              value={date(watchCreatedAt).isValid() ? date(watchCreatedAt) : null}\n              maxDate={date()}\n              rules={{\n                required: true,\n                validate: {\n                  maxDate: (value: string) =>\n                    Promise.resolve(date(value) <= date() || t(helper.createdAt.max!.message))\n                }\n              }}\n              onChange={handleDatePickerChange}\n              sx={{ width: '100%' }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormInput\n              inputProps={{ readOnly: isViewMode }}\n              label={t('COMMON.NOTE')}\n              name={TransactionField.note}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormIcon\n              name={TransactionField.categoryId}\n              label={t('COMMON.CATEGORY')}\n              rules={{\n                required: {\n                  value: true,\n                  message: t(helper.categoryId.required!.message)\n                }\n              }}\n              render={({ field }) => (\n                <Grid container {...field} columnGap={4} rowGap={4}>\n                  {\n                    categories.filter(({ type }) => type === Number(watchType)).map((category) => (\n                      <Grid item key={category.id}>\n                        <CategoryIcon data={getCategoryData(category)} selected={field.value} readonly={isViewMode} onItemClick={handleCategoryIconClick} />\n                      </Grid>\n                    ))\n                  }\n                </Grid>\n              )} />\n          </Grid>\n        </Grid>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <Box component='form' display='flex' flexDirection='column' flexGrow={1} onSubmit={handleSubmit(handleFormSubmit)}>\n      <PageTitle\n        withBackButton\n        withEditButton={isViewMode && !!transaction}\n        withDeleteButton={isEditMode && !!transaction}\n        withCancelButton={!isViewMode && !!transaction}\n        text={title}\n        onBackButtonClick={goBack}\n        onEditButtonClick={handleEditButtonClick}\n        onDeleteButtonClick={handleOpenDialog}\n        onCancelButtonClick={handleCancelButtonClick}\n      />\n      <Box flexGrow={1}>\n        {renderContent()}\n      </Box>\n      {!isViewMode && (\n        <Grid container display='flex' justifyContent='flex-end' rowGap={2} columnGap={2} sx={{ marginTop: 4, marginBottom: 4 }}>\n          <Grid item sm='auto' xs={12}>\n            <Button aria-label='Save transaction' fullWidth type='submit' variant='contained' loading={loading}\n              onClick={handleSubmit(handleFormSubmit)}>\n              {t('COMMON.SAVE')}\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      <Snackbar type='error' open={showSnackbar} text={error?.messageKey ? t(error.messageKey) : error?.message || ''} onClose={handleSnackbarClose} />\n      <Dialog\n        fullWidth\n        maxWidth='xs'\n        title={t('TRANSACTIONS.DELETE_DIALOG_TITLE')!}\n        actionButtonText={t('COMMON.YES')!}\n        open={dialogOpened}\n        loading={deleteLoading}\n        onClose={handleCloseDialog}\n        onAction={handleDeleteTransaction}\n      >\n        <Typography variant='subtitle1'>\n          {t('TRANSACTIONS.DELETE_DIALOG_CONFIRM')}\n        </Typography>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CreateEditTransaction;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ROUTES } from 'shared/constants';\nimport { ManageMode } from 'shared/models';\nimport TransactionList from './pages/TransactionList';\nimport CreateEditTransaction from './pages/CreateEditTransaction';\n\nconst Transactions: React.FC = () => {\n  return (\n    <Routes>\n      <Route path='/' element={<TransactionList />} />\n      <Route path='/new' element={<CreateEditTransaction mode={ManageMode.create} />} />\n      <Route path='/view/:id' element={<CreateEditTransaction mode={ManageMode.view} />} />\n      <Route path='/edit/:id' element={<CreateEditTransaction mode={ManageMode.edit} />} />\n      <Route path='*' element={<Navigate to={ROUTES.accounts.path} replace />} />\n    </Routes>\n  );\n};\n\nexport default Transactions;\n","import * as React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { DatePicker as MuiDatePicker, DatePickerProps as MuiDatePickerProps } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { LocalizedDate } from 'core/date';\nimport { FormControlRules } from 'shared/models';\n\ntype FormDatePickerProps = {\n  name: string;\n  label: string;\n  rules?: FormControlRules;\n} & MuiDatePickerProps<LocalizedDate>;\n\nconst FormDatePicker: React.FC<FormDatePickerProps> = ({ name, label, rules = {}, ...props }) => {\n  const {\n    control,\n    formState: { errors }\n  } = useFormContext();\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer sx={{ ...props.sx, paddingTop: 2, overflow: 'initial' }} components={['DatePicker']}>\n        <Controller\n          control={control}\n          name={name}\n          rules={rules}\n          render={({ field, fieldState: { error } }) => (\n            <Box position='relative' sx={{ width: '100%' }}>\n              <InputLabel>{label}</InputLabel>\n              <MuiDatePicker\n                {...field}\n                {...props} />\n              {errors[name] && <FormHelperText sx={{ position: 'absolute' }} error>{error?.message}</FormHelperText>}\n            </Box>\n          )}\n        />\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n};\n\nexport default FormDatePicker;\n"],"names":["_ref","data","onClick","palette","primary","main","contrastText","error","useTheme","name","icon","accountName","accountIcon","createdAt","amount","type","formattedCreatedAt","date","format","DATE_FORMAT","_jsx","Paper","elevation","sx","paddingX","backgroundColor","onTransactionClick","children","_jsxs","Grid","container","columnSpacing","alignItems","minHeight","cursor","item","xs","display","Icon","color","fontSize","sm","Typography","noWrap","justifyContent","CategoryType","TransactionList","dispatch","useAppDispatch","transactions","status","useAppSelector","selectTransaction","navigate","useNavigate","state","useLocation","t","useTranslation","categoryId","React","getTransactions","handleTransactionClick","id","concat","ROUTES","Box","flexGrow","PageTitle","text","rowGap","Skeleton","length","_Fragment","map","transaction","Transaction","nameKey","accountNameKey","EmptyState","mode","regex","POSITIVE_NUMERIC_REGEX","tabs","TABS","categories","selectCategory","categoryStatus","selectCategoryStatus","getStatus","createEditStatus","deleteStatus","selectTransactionError","accounts","selectAccount","accountStatus","selectAccountStatus","defaultAccount","selectSettings","selectCurrentTransaction","info","helper","transactionHelper","formSubmitted","setFormSubmitted","deleteClicked","setDeleteClicked","showSnackbar","setShowSnackbar","dialogOpened","setDialogOpened","loading","deleteLoading","transactionId","transactionName","categoryType","isCreateMode","ManageMode","isEditMode","isViewMode","title","getPageTitle","defaultValues","accountId","String","undefined","note","methods","useForm","reValidateMode","setValue","handleSubmit","watch","reset","watchType","TransactionField","watchAccount","watchCreatedAt","handleCategoryTypeChange","value","Number","shouldValidate","handleCategoryIconClick","_ref2","handleAccountChange","event","target","handleDatePickerChange","handleFormSubmit","mappedData","toDate","editTransaction","addTransaction","setFormValues","mapCurrencyStringToInputString","resetTransaction","resetGetTransactionStatus","goBack","getCategories","getAccounts","setGetTransactionErrorStatus","getTransaction","component","flexDirection","onSubmit","withBackButton","withEditButton","withDeleteButton","withCancelButton","onBackButtonClick","onEditButtonClick","handleEditButtonClick","onDeleteButtonClick","handleOpenDialog","onCancelButtonClick","handleCancelButtonClick","FormProvider","FormRadioGroup","readonly","rules","required","message","options","mapCategoryTypesWithTranslations","labelColor","onRadioChange","FormInput","InputProps","readOnly","label","pattern","FormSelect","inputProps","onChange","renderValue","getAccountLabel","account","MenuItem","AccountOption","FormDatePicker","isValid","maxDate","validate","Promise","resolve","max","width","FormIcon","render","_ref3","field","columnGap","filter","_ref4","category","CategoryIcon","selected","onItemClick","marginTop","marginBottom","Button","fullWidth","variant","Snackbar","open","messageKey","onClose","handleSnackbarClose","Dialog","maxWidth","actionButtonText","handleCloseDialog","onAction","handleDeleteTransaction","deleteTransaction","Transactions","Routes","Route","path","element","CreateEditTransaction","Navigate","to","replace","props","control","formState","errors","useFormContext","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","paddingTop","overflow","components","Controller","fieldState","position","InputLabel","MuiDatePicker","FormHelperText"],"sourceRoot":""}